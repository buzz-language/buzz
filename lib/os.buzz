import "lib/errors";

|| @return epoch time in ms
extern fun time() > int;

|| Returns environment variable under `key`
|| @param key environment variable name
extern fun env(str key) > str? !> InvalidArgumentError;

|| @return path to system temp directory
extern fun tmpDir() > str;

|| @param prefix prefix to the temp file name
|| @return a temporary file name in system tmp dir
extern fun tmpFilename(str? prefix) > str;

|| Exit program with `exitCode`
|| @param exitCode exit code
extern fun buzzExit(int exitCode) > void;

|| Execute command and return its exit code
|| @param command command to execute
|| @return exit code of the command
extern fun execute([str] command) > int !> FileSystemError, UnexpectedError, FileNotFoundError;

export time;
export env;
export tmpDir;
export tmpFilename;
export buzzExit as exit;
export execute;

|| @private
extern fun SocketConnect(str address, int port, int netProtocol) > int !> InvalidArgumentError, SocketError, NotYetImplementedError;
|| @private
extern fun SocketClose(int fd) > void;
|| @private
extern fun SocketRead(int fd, int n) > str? !> InvalidArgumentError, FileSystemError, ReadWriteError, UnexpectedError;
|| @private
extern fun SocketWrite(int fd, str bytes) > void !> FileSystemError, ReadWriteError, UnexpectedError;
|| @private
extern fun SocketServerStart(str address, int port, bool reuseAddr) > int !> InvalidArgumentError, SocketError, UnexpectedError, FileSystemError;
|| @private
extern fun SocketServerAccept(int fd, bool reuseAddr) > int !> SocketError, UnexpectedError;
|| @private
extern fun SocketReadLine(int fd) > str? !> FileSystemError, UnexpectedError, ReadWriteError;
|| @private
extern fun SocketReadAll(int fd) > str? !> FileSystemError, UnexpectedError, ReadWriteError;

|| Protocols supported over a socket
enum SocketProtocol {
    tcp,
    udp,
    ipc,
}

|| A socket
object Socket {
    || @private
    int fd,

    || Opens a socket
    || @param address A string containing either a IPv4, IPv6 or path to a socket file (IPC)
    || @param port Port to which to connect
    || @param protocol Protocol to use
    || @return A new `Socket` opened and ready to use
    static fun connect(str address, int port, SocketProtocol netProtocol) > Socket !> InvalidArgumentError, SocketError, NotYetImplementedError {
        return Socket{
            fd = SocketConnect(address, port: port, netProtocol: netProtocol.value),
        };
    }

    || Close the socket
    fun close() > void {
        SocketClose(this.fd);
    }

    || Receive at most `n` bytes from the socket
    || @param n How many bytes we're prepare to receive
    || @return The bytes received or null if nothing to read
    fun receive(int n) > str? !> InvalidArgumentError, FileSystemError, ReadWriteError, UnexpectedError {
        return SocketRead(this.fd, n: n);
    }

    || Receive from socket until it's closed or a linefeed is received
    || @return The bytes received or null if nothing to read
    fun receiveLine() > str? !> FileSystemError, UnexpectedError, ReadWriteError {
        return SocketReadLine(this.fd);
    }

    || Receive from socket until it's closed
    || @return The bytes received or null if nothing to read
    fun receiveAll() > str? !> FileSystemError, UnexpectedError, ReadWriteError {
        return SocketReadAll(this.fd);
    }

    || Send bytes on the socket
    || @param bytes Bytes to send
    fun send(str bytes) > void !> FileSystemError, ReadWriteError, UnexpectedError {
        SocketWrite(this.fd, bytes: bytes);
    }
}

|| A TCP Server
object TcpServer {
    || @private
    Socket serverSocket,
    || @private
    bool reuseAddr,

    || Starts a TCP server
    || @param address Address to listen on
    || @param port Port to listen on
    || @param reuseAddr Wether we want to accept multiple connections
    || @return New `TcpServer` bound to `<address>:<port>`
    static fun init(str address, int port, bool reuseAddr) > TcpServer !> SocketError, UnexpectedError, InvalidArgumentError, FileSystemError {
        return TcpServer{
            serverSocket = Socket{
                fd = SocketServerStart(address, port: port, reuseAddr: reuseAddr),
            },
            reuseAddr = reuseAddr,
        };
    }

    || Accept a new connection
    || @return Socket opened with the client
    fun accept() > Socket !> SocketError, UnexpectedError {
        return Socket{
            fd = SocketServerAccept(this.serverSocket.fd, reuseAddr: this.reuseAddr),
        };
    }

    || Close server
    fun close() > void {
        this.serverSocket.close();
    }
}

export SocketProtocol;
export Socket;
export TcpServer;