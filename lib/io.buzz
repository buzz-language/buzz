import "lib/errors";

|| @private
extern fun FileOpen(str filename, int mode) > int !> FileNotFoundError, FileSystemError, UnexpectedError;
|| @private
extern fun FileClose(int fd) > void;
|| @private
extern fun FileReadAll(int fd) > str !> ReadWriteError, FileSystemError, UnexpectedError;
|| @private
extern fun FileReadLine(int fd) > str? !> ReadWriteError, FileSystemError, UnexpectedError;
|| @private
extern fun FileRead(int fd, int n) > str? !> ReadWriteError, FileSystemError, InvalidArgumentError, UnexpectedError;
|| @private
extern fun FileWrite(int fd, str bytes) > void !> FileSystemError, ReadWriteError, UnexpectedError;
|| @private
extern fun getStdIn() > int;
|| @private
extern fun getStdOut() > int;
|| @private
extern fun getStdErr() > int;

|| File mode with which you can open a file
enum FileMode {
    read,
    write,
    update,
}

|| Object to manipulate an opened file
object File {
    || File descriptor
    int fd,

    || Open file
    || @param filename Path of file to open
    || @param mode Mode with which to open it
    || @return opened file
    static fun open(str filename, FileMode mode) > File !> FileNotFoundError, FileSystemError, UnexpectedError {
        return File {
            fd = FileOpen(filename, mode: mode.value),
        };
    }

    || Close file
    fun close() > void {
        FileClose(this.fd);
    }

    || Reads file until `EOF`
    fun readAll() > str !> ReadWriteError, FileSystemError, UnexpectedError {
        return FileReadAll(this.fd);
    }

    || Reads next line, returns null if nothing to read
    fun readLine() > str? !> ReadWriteError, FileSystemError, UnexpectedError {
        return FileReadLine(this.fd);
    }

    || Reads `n` bytes, returns null if nothing to read
    || @param n how many bytes to read
    fun read(int n) > str? !> ReadWriteError, FileSystemError, InvalidArgumentError, UnexpectedError {
        return FileRead(this.fd, n: n);
    }

    || Write bytes
    || @param bytes string to write
    fun write(str bytes) > void !> FileSystemError, ReadWriteError, UnexpectedError {
        FileWrite(this.fd, bytes: bytes);
    }
}

|| stdin
const File stdin = File { fd = getStdIn() };
|| stdout
const File stdout = File { fd = getStdOut() };
|| stderr
const File stderr = File { fd = getStdErr() };

|| Run a buzz file
|| @param filename path to buzz file
extern fun runFile(str filename) > void !> CompileError, InterpretError, FileSystemError, ReadWriteError;

export FileMode;
export File;
export stdin;
export stdout;
export stderr;
export runFile;