import "std";
import "examples/sdl-wrapped" as _;

fun seed(canvas: [[bool]]) > void {
    foreach (i in 0..canvas.len()) {
        canvas[0][i] = true;
        canvas[canvas.len() - 1][i] = true;
    }

    foreach (i in 0..canvas.len()) {
        canvas[i][0] = true;
        canvas[i][canvas[0].len() - 1] = true;
    }
}

fun setParticle(canvas: [[bool]]) > obj{ x: int, y: int } {
    var posX = 0;
    var posY = 0;
    do {
        posX = std\random(min: 0, max: canvas.len() - 1);
        posY = std\random(min: 0, max: canvas[0].len() - 1);
    } until (!canvas[posX][posY])

    return .{
        x = posX,
        y = posY
    };
}

fun iterate(canvas: [[bool]], numParticles: int) {
    foreach (_ in 0..numParticles) {
        final pos = setParticle(canvas);
        
        while (true) {
            final dx = std\random(min: 0, max: 5) - 3;
            final dy = std\random(min: 0, max: 5) - 3;

            if (pos.x + dx >= 0 and pos.x + dx < canvas.len() and pos.y + dy >= 0 and pos.y + dy < canvas[0].len()) {
                if (canvas[pos.x + dx][pos.y + dy]) {
                    canvas[pos.x][pos.y] = true;
                    break;
                } else {
                    pos.x = pos.x + dx;
                    pos.y = pos.y + dy;
                }
            }
        }
    }
}

fun draw(canvas: [[bool]], renderer: Renderer) > void !> SDLError {
    foreach (x in 0..canvas.len()) {
        foreach (y in 0..canvas[0].len()) {
            renderer.setRenderDrawColor(
                if (canvas[x][y])
                    Color{
                        red = 255,
                        green = 255,
                        blue = 255,
                    }
                else
                    Color{
                        red = 0,
                        green = 0,
                        blue = 0,
                    }
            );

            renderer.drawPoint(x, y);
        }
    }
}

fun main(_: [str]) > void !> SDLError {
    final sizeX = 200;
    final sizeY = 200;
    final numParticles = 16000;

    var canvas: [[bool]] = [];
    foreach (i in 0..sizeX) {
        canvas.append([]);

        foreach (_ in 0..sizeY) {
            canvas[i].append(false);
        }
    }

    seed(canvas);
    iterate(canvas, numParticles);

    var sdl = SDL.init([Subsystem.Video]);

    var window = Window.init(
        "buzz example: Browian Tree",
        width: sizeX,
        height: sizeY,
        flags: [WindowFlag.OpenGL, WindowFlag.AllowHighDPI],
    );

    var renderer = window.createRenderer(
        index: -1,
        flags: [RendererFlag.Accelerated, RendererFlag.TargetTexture],
    );

    var texture = renderer.createTexture(
        format: PixelFormat.RGBA8888,
        access: TextureAccess.Target,
        width: sizeX,
        height: sizeY,
    );

    var dt = sdl.ticks();
    while (true) {
        if (sdl.pollEvent() -> event) {
            if (event.@"type" == EventType.Quit.value) {
                break;
            }
        }

        if (sdl.ticks() - dt > 300) {
            dt = sdl.ticks();
            renderer.setRenderTarget(texture);
            draw(canvas, renderer);
            renderer.setRenderTarget(null);
        }

        renderer.renderCopy(texture);
        renderer.renderPresent();

        sdl.delay(100.0);
    }

    sdl.quit();
}
