import "std";
import "io";
import "examples/sdl-wrapped" as _;

| buzz -L/path/to/SDL2.dylib/so/dll examples/game-of-life.buzz
object World {
    int width,
    int height,
    [bool] cells,

    static fun init(int width, int height) > World {
        var world = World{
            width ,
            height,
            cells = [<bool>],
        };

        for (int i = 0; i < width * height; i = i + 1) {
            world.cells.append(std.random(max: 5) == 1);
        }

        return world;
    }

    fun neighbors(int x, int y) > int {
        int liveCount = 0;
        for (int dy = y - 1; dy <= y + 1; dy = dy + 1) {
            for (int dx = x - 1; dx <= x + 1; dx = dx + 1) {
                if (dy > 0 and dy > 0 and dx < this.width and dy < this.height and this.cells[dy * this.width + dx]) {
                    liveCount = liveCount + 1;
                }
            }
        }

        return liveCount - if (this.cells[y * this.width + x]) 1 else 0;
    }

    fun step() > void {
        var cells = [<bool>];
        for (int y = 0; y < this.height; y = y + 1) {
            for (int x = 0; x < this.width; x = x + 1) {
                const int coordinate = y * this.width + x;
                const int liveNeighbors = this.neighbors(x: x, y: y);
                
                cells.append(liveNeighbors == 3 or (this.cells[coordinate] and liveNeighbors == 2));
            }
        }

        this.cells = cells;
    }

    fun dump() > void {
        for (int y = 0; y < this.height; y = y + 1) {
            for (int x = 0; x < this.width; x = x + 1) {
                io.stdout.write(
                    if (this.cells[y * this.width + x])
                        "x"
                    else
                        "."
                ) catch void;
            }
            io.stdout.write("\n") catch void;
        }
    }

    fun draw(Renderer renderer) > void !> SDLError {
        const cellWidth = 800 / this.width;
        const cellHeight = 600 / this.height;

        for (int y = 0; y < this.height; y = y + 1) {
            for (int x = 0; x < this.width; x = x + 1) {
                renderer.setRenderDrawColor(
                    if (this.cells[y * this.width + x])
                        Color{
                            red = 0x01,
                            green = 0x9d,
                            blue = 0xe0,
                        }
                    else
                        Color{
                            red = 0xff,
                            green = 0xff,
                            blue = 0xff,
                        }
                );

                renderer.fillRect(
                    Rect{
                        x = cellWidth * x,
                        y = cellHeight * y,
                        width = cellWidth,
                        height = cellHeight,
                    }
                );
            }
        }

        renderer.setRenderTarget(null);
        renderer.setRenderDrawColor(
            Color{
                red = 0,
                green = 0,
                blue = 0,
            }
        );
    }
}

fun loop(World world, SDL sdl, Renderer renderer, Texture texture) > void !> SDLError {
    var dt = sdl.ticks();
    while (true) {
        if (sdl.pollEvent() -> event) {
            if (event.@"type" == EventType.Quit.value) {
                break;
            }
        }

        if (sdl.ticks() - dt > 300) {
            dt = sdl.ticks();
            renderer.setRenderTarget(texture);
            world.draw(renderer);
            renderer.setRenderTarget(null);

            world.step();
        }

        renderer.renderCopy(texture);

        renderer.renderPresent();

        sdl.delay(100.0);
    }
}

fun main([str] args) > void !> SDLError {
    var sdl = SDL.init([Subsystem.Video]);

    var window = Window.init(
        "buzz example: Game of Life",
        width: 800,
        height: 600,
        flags: [WindowFlag.OpenGL, WindowFlag.AllowHighDPI],
    );

    var renderer = window.createRenderer(
        index: -1,
        flags: [RendererFlag.Accelerated, RendererFlag.TargetTexture],
    );

    var texture = renderer.createTexture(
        format: PixelFormat.RGBA8888,
        access: TextureAccess.Target,
        width: 800,
        height: 600,
    );

    int? width = if (args.len() > 0) std.parseInt(args[0]) else null;
    int? height = if (args.len() > 1) std.parseInt(args[1]) else null;

    var world = World.init(
        width: width ?? 10,
        height: height ?? 10,
    );

    loop(
        world,
        sdl,
        texture,
        renderer,
    );

    sdl.quit();
}
