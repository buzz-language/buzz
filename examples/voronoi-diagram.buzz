import "std";
import "examples/sdl-wrapped" as _;
import "math";

fun hypot(x: int, y: int) > int {
    return std\toInt(
        math\sqrt(
            std\toDouble(
                x * x + y * y
            )
        )
    );
}

fun generateVoronoi(renderer: Renderer, width: int, height: int, numCells: int) > void !> SDLError {
    var nx: [int] = [];
    var ny: [int] = [];
    var colors: [Color] = [];

    foreach (_ in 0..numCells) {
        nx.append(std\random(min: 0, max: width));
        ny.append(std\random(min: 0, max: height));
        colors.append(Color{
            red = std\random(min: 0, max: 255),
            green = std\random(min: 0, max: 255),
            blue = std\random(min: 0, max: 255)
        });
    }

    renderer.setRenderDrawColor(
        Color{
            red = 255,
            green = 255,
            blue = 255,
        }
    );

    foreach (y in 0..width) {
        foreach (x in 0..height) {
            var dmin = hypot(x: width - 1, y: height - 1);
            var j = -1;
            foreach (i in 0..numCells) {
                final d = hypot(x: nx[i] - x, y: ny[i] - y);
                if (d < dmin) {
                    dmin = d;
                    j = i;
                }
            }

            renderer.setRenderDrawColor(colors[j]);

            renderer.drawPoint(x, y);
        }
    }

    renderer.setRenderDrawColor(
        Color{
            red = 255,
            green = 255,
            blue = 255,
        }
    );

    foreach (b in 0..numCells) {
        renderer.drawPoint(x: nx[b], y: ny[b]);
    }
}

fun main(_: [str]) > void !> SDLError {
    final width = 400;
    final height = 400;
    final numCells = 50;

    var sdl = SDL.init([Subsystem.Video]);

    var window = Window.init(
        "buzz example: Voronoi Diagram",
        width,
        height,
        flags: [WindowFlag.OpenGL, WindowFlag.AllowHighDPI],
    );

    var renderer = window.createRenderer(
        index: -1,
        flags: [RendererFlag.Accelerated, RendererFlag.TargetTexture],
    );

    var texture = renderer.createTexture(
        format: PixelFormat.RGBA8888,
        access: TextureAccess.Target,
        width,
        height,
    );

    renderer.setRenderTarget(texture);
    generateVoronoi(renderer, width, height, numCells);
    renderer.setRenderTarget(null);

    while (true) {
        if (sdl.pollEvent() -> event) {
            if (event.@"type" == EventType.Quit.value) {
                break;
            }
        }

        renderer.renderCopy(texture);
        renderer.renderPresent();

        sdl.delay(100.0);
    }

    sdl.quit();
}