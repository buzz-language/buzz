namespace buffer;

import "ffi";

export object WriteWhileReadingError {}
export object OutOfBoundError {}

/// @private
extern fun BufferNew(capacity: int) > ud;
/// @private
extern fun BufferDeinit(userdata: ud) > void;
/// @private
extern fun BufferRead(userdata: ud, n: int) > str?;
/// @private
extern fun BufferWrite(userdata: ud, bytes: str) > void !> WriteWhileReadingError;
/// @private
extern fun BufferReadBoolean(userdata: ud) > bool?;
/// @private
extern fun BufferWriteBoolean(userdata: ud, b: bool) > void !> WriteWhileReadingError;
/// @private
extern fun BufferWriteInt(userdata: ud, n: int) > void !> WriteWhileReadingError;
/// @private
extern fun BufferReadInt(userdata: ud) > int?;
/// @private
extern fun BufferWriteUserData(userdata: ud, ptr: ud) > void !> WriteWhileReadingError;
/// @private
extern fun BufferReadUserData(userdata: ud) > ud?;
/// @private
extern fun BufferWriteDouble(userdata: ud, n: double) > void !> WriteWhileReadingError;
/// @private
extern fun BufferReadDouble(userdata: ud) > double?;
/// @private
extern fun BufferLen(userdata: ud, align: int) > int;
/// @private
extern fun BufferCursor(userdata: ud) > int;
/// @private
extern fun BufferBuffer(userdata: ud) > str;
/// @private
extern fun BufferPtr(userdata: ud, at: int, alignment: int) > ud;
/// @private
extern fun BufferEmpty(userdata: ud) > void;
/// @private
extern fun BufferAt(userdata: ud, index: int) > int;
/// @private
extern fun BufferSetAt(userdata: ud, index: int, value:int ) > void;
/// @private
extern fun BufferWriteZ(userdata: ud, zigType: str, values: [any]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError;
/// @private
extern fun BufferWriteZAt(userdata: ud, at: int, zigType: str, values: [any]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError;
/// @private
extern fun BufferReadZ::<T>(userdata: ud, zigType: str) > T !> ffi\FFITypeMismatchError;
/// @private
extern fun BufferReadZAt::<T>(userdata: ud, at: int, zigType: str) > T !> ffi\FFITypeMismatchError;
/// @private
extern fun BufferWriteStruct::<T>(userdata: ud, structType: type, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError;
/// @private
extern fun BufferWriteStructAt::<T>(userdata: ud, structType: type, at: int, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError;
/// @private
extern fun BufferReadStruct::<T>(userdata: ud, structType: type) > T !> ffi\FFITypeMismatchError;
/// @private
extern fun BufferReadStructAt::<T>(userdata: ud, structType: type, at: int) > T !> ffi\FFITypeMismatchError;

/// Read and write data to a string buffer
export object Buffer {
    /// @private
    buffer: ud,
    /// @private
    released: bool = false,

    /// @return A new `Buffer`
    static fun init(capacity: int = 0) > Buffer {
        return Buffer{
            buffer = BufferNew(capacity)
        };
    }

    static fun fromStr(string: str) > Buffer {
        final buffer = Buffer.init();
        
        // We're sure we did not read this buffer before
        buffer.write(string) catch void;

        return buffer;
    }

    /// Frees the buffer
    mut fun collect() > void {
        // Avoid double free
        if (!this.released) {
            this.released = true;
            BufferDeinit(this.buffer);
        }
    }

    /// Reads `n` bytes
    /// @return Read bytes or `null` if nothing to read
    fun read(n: int = 1) > str? {
        return BufferRead(this.buffer, n: n);
    }

    /// Writes a string
    /// @param bytes Bytes to write
    fun write(bytes: str) > void !> WriteWhileReadingError {
        BufferWrite(this.buffer, bytes: bytes);
    }

    fun writeZ::<T>(zigType: str, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError {
        BufferWriteZ(this.buffer, zigType: zigType, values: values);
    }

    fun writeZAt::<T>(at: int, zigType: str, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError {
        BufferWriteZAt(this.buffer, at: at, zigType: zigType, values: values);
    }

    fun readZ::<T>(zigType: str) > T !> ffi\FFITypeMismatchError {
        return BufferReadZ::<T>(this.buffer, zigType: zigType);
    }

    fun readZAt::<T>(at: int, zigType: str) > T !> ffi\FFITypeMismatchError {
        return BufferReadZAt::<T>(this.buffer, at: at, zigType: zigType);
    }

    fun writeStruct::<T>(structType: type, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError {
        BufferWriteStruct::<T>(this.buffer, structType: structType, values: values);
    }

    fun writeStructAt::<T>(structType: type, at: int, values: [T]) > void !> WriteWhileReadingError, ffi\FFITypeMismatchError {
        BufferWriteStructAt::<T>(this.buffer, structType: structType, at: at, values: values);
    }

    fun readStruct::<T>(structType: type) > T !> ffi\FFITypeMismatchError {
        return BufferReadStruct::<T>(this.buffer, structType: structType);
    }

    fun readStructAt::<T>(structType: type, at: int) > T !> ffi\FFITypeMismatchError {
        return BufferReadStructAt::<T>(this.buffer, structType: structType, at: at);
    }

    /// Reads a boolean
    /// @return Boolean we read or `null` if nothing to read
    fun readBoolean() > bool? {
        return BufferReadBoolean(this.buffer);
    }

    /// Writes a boolean
    /// @param boolean Boolean to write
    fun writeBoolean(boolean: bool) > void !> WriteWhileReadingError {
        BufferWriteBoolean(this.buffer, b: boolean);
    }

    /// Reads an integer
    /// @return Read integer or `null` if nothing to read
    fun readInt() > int? {
        return BufferReadInt(this.buffer);
    }

    /// Writes an integer
    /// @param number Integer to write
    fun writeInt(number: int) > void !> WriteWhileReadingError {
        BufferWriteInt(this.buffer, n: number);
    }

    /// Reads an ud
    /// @return Read ud or `null` if nothing to read
    fun readUserData() > ud? {
        return BufferReadUserData(this.buffer);
    }

    /// Writes an ud
    /// @param number UserDataeger to write
    fun writeUserData(userdata: ud) > void !> WriteWhileReadingError {
        BufferWriteUserData(this.buffer, ptr: userdata);
    }

    /// Reads a double
    /// @return Read double or `null` if nothing to read
    fun readDouble() > double? {
        return BufferReadDouble(this.buffer);
    }

    /// Writes a double
    /// @param number Double to write
    fun writeDouble(number: double) > void !> WriteWhileReadingError {
        BufferWriteDouble(this.buffer, n: number);
    }


    /// @return Length of the buffer
    fun len(align: int = 1) > int {
        return BufferLen(this.buffer, align: align);
    }

    /// @return Position of the reading cursor
    fun cursor() > int {
        return BufferCursor(this.buffer);
    }

    /// Empties the buffer
    fun empty() > void {
        BufferEmpty(this.buffer);
    }

    /// Get buffer as string
    fun toString() > str {
        return BufferBuffer(this.buffer);
    }

    /// Get buffer's ptr
    fun ptr(at: int = 0, align: int = 1) > ud {
        return BufferPtr(this.buffer, at: at, alignment: align);
    }

    /// Get byte at `index`
    fun at(index: int) > int !> OutOfBoundError {
        if (index < this.len()) {
            return BufferAt(this.buffer, index: index);
        }

        throw OutOfBoundError{};
    }

    /// Set byte at `index`
    fun setAt(index: int, value: int) > void !> WriteWhileReadingError, OutOfBoundError {
        if (index < this.len()) {
            BufferSetAt(this.buffer, index: index, value: value);

            return;
        }

        throw OutOfBoundError{};
    }
}
