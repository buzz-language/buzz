import "errors";
import "ffi";
import "std";

export object WriteWhileReadingError {}
export object OutOfBoundError {}

|| @private
extern fun BufferNew(int capacity) > ud;
|| @private
extern fun BufferDeinit(ud userdata) > void;
|| @private
extern fun BufferRead(ud userdata, int n) > str?;
|| @private
extern fun BufferWrite(ud userdata, str bytes) > void !> WriteWhileReadingError;
|| @private
extern fun BufferReadBoolean(ud userdata) > bool?;
|| @private
extern fun BufferWriteBoolean(ud userdata, bool b) > void !> WriteWhileReadingError;
|| @private
extern fun BufferWriteInt(ud userdata, int n) > str !> WriteWhileReadingError;
|| @private
extern fun BufferReadInt(ud userdata) > int?;
|| @private
extern fun BufferWriteFloat(ud userdata, float n) > str !> WriteWhileReadingError;
|| @private
extern fun BufferReadFloat(ud userdata) > float?;
|| @private
extern fun BufferLen(ud userdata, int align) > int;
|| @private
extern fun BufferCursor(ud userdata) > int;
|| @private
extern fun BufferBuffer(ud userdata) > str;
|| @private
extern fun BufferPtr(ud userdata, int at, int alignment) > ud;
|| @private
extern fun BufferEmpty(ud userdata) > void;
|| @private
extern fun BufferAt(ud userdata, int index) > int;
|| @private
extern fun BufferSetAt(ud userdata, int index, int value) > void;
|| @private
extern fun BufferWriteZ(ud userdata, str type, [any] values) > void !> WriteWhileReadingError, FFITypeMismatchError;
|| @private
extern fun BufferWriteZAt(ud userdata, int at, str type, [any] values) > void !> WriteWhileReadingError, FFITypeMismatchError;
|| @private
extern fun BufferReadZ(<T>, ud userdata, str type) > T !> FFITypeMismatchError;
|| @private
extern fun BufferReadZAt(<T>, ud userdata, int at, str type) > T !> FFITypeMismatchError;

|| Read and write data to a string buffer
export object Buffer {
    || @private
    ud buffer,

    || @return A new `Buffer`
    static fun init(int capacity = 0) > Buffer {
        return Buffer{
            buffer = BufferNew(capacity)
        };
    }

    || Frees the buffer
    fun collect() > void {
        | print("Buffer collect called");
        BufferDeinit(this.buffer);
    }

    || Reads `n` bytes
    || @return Read bytes or `null` if nothing to read
    fun read(int n) > str? {
        return BufferRead(this.buffer, n: n);
    }

    || Writes a string
    || @param bytes Bytes to write
    || @hot
    fun write(str bytes) > void !> WriteWhileReadingError {
        BufferWrite(this.buffer, bytes: bytes);
    }

    fun writeZ(<T>, str type, [T] values) > void !> WriteWhileReadingError, FFITypeMismatchError {
        BufferWriteZ(this.buffer, type: type, values: values);
    }

    fun writeZAt(<T>, int at, str type, [T] values) > void !> WriteWhileReadingError, FFITypeMismatchError {
        BufferWriteZAt(this.buffer, at: at, type: type, values: values);
    }

    fun readZ(<T>, str type) > T !> FFITypeMismatchError {
        return BufferReadZ(<T>, this.buffer, type: type);
    }

    fun readZAt(<T>, int at, str type) > T !> FFITypeMismatchError {
        return BufferReadZAt(<T>, this.buffer, at: at, type: type);
    }

    || Reads a boolean
    || @return Boolean we read or `null` if nothing to read
    fun readBoolean() > bool? {
        return BufferReadBoolean(this.buffer);
    }

    || Writes a boolean
    || @param boolean Boolean to write
    fun writeBoolean(bool boolean) > void !> WriteWhileReadingError {
        BufferWriteBoolean(this.buffer, b: boolean);
    }

    || Reads an integer
    || @return Read integer or `null` if nothing to read
    fun readInt() > int? {
        return BufferReadInt(this.buffer);
    }

    || Writes an integer
    || @param number Integer to write
    fun writeInt(int number) > void !> WriteWhileReadingError {
        BufferWriteInt(this.buffer, n: number);
    }

    || Reads a float
    || @return Read float or `null` if nothing to read
    fun readFloat() > float? {
        return BufferReadFloat(this.buffer);
    }

    || Writes a float
    || @param number Float to write
    fun writeFloat(float number) > void !> WriteWhileReadingError {
        BufferWriteFloat(this.buffer, n: number);
    }


    || @return Length of the buffer
    fun len(int align = 1) > int {
        return BufferLen(this.buffer, align: align);
    }

    || @return Position of the reading cursor
    fun cursor() > int {
        return BufferCursor(this.buffer);
    }

    || Empties the buffer
    fun empty() > void {
        BufferEmpty(this.buffer);
    }

    || Get buffer as string
    fun toString() > str {
        return BufferBuffer(this.buffer);
    }

    || Get buffer's ptr
    fun ptr(int at = 0, int align = 1) > ud {
        return BufferPtr(this.buffer, at: at, alignment: align);
    }

    || Get byte at `index`
    fun at(int index) > int !> OutOfBoundError {
        if (index < this.len()) {
            return BufferAt(this.buffer, index: index);
        }

        throw OutOfBoundError{};
    }

    || Set byte at `index`
    fun setAt(int index, int value) > void !> WriteWhileReadingError, OutOfBoundError {
        if (index < this.len()) {
            BufferSetAt(this.buffer, index: index, value: value);

            return;
        }

        throw OutOfBoundError{};
    }
}