namespace testing;

import "os";
import "io";

export enum<int> Color {
    // attributes
    reset      = 0,
    bright     = 1,
    dim        = 2,
    underscore = 4,
    blink      = 5,
    reverse    = 7,
    hidden     = 8,

    // foreground
    black   = 30,
    red     = 31,
    green   = 32,
    yellow  = 33,
    blue    = 34,
    magenta = 35,
    cyan    = 36,
    white   = 37,

    // background
    onblack   = 40,
    onred     = 41,
    ongreen   = 42,
    onyellow  = 43,
    onblue    = 44,
    onmagenta = 45,
    oncyan    = 46,
    onwhite   = 47,
}

export fun color(text: str, color: Color, reset: bool = true) > str {
    return "\27[{color.value}m{text}{if (reset) "\27[0m" else ""}";
}

export fun bright(text: str) => color(text, color: Color.bright);
export fun dim(text: str) => color(text, color: Color.dim);
export fun underscore(text: str) => color(text, color: Color.underscore);
export fun blink(text: str) => color(text, color: Color.blink);
export fun reverse(text: str) => color(text, color: Color.reverse);
export fun hidden(text: str) => color(text, color: Color.hidden);
export fun black(text: str) => color(text, color: Color.black);
export fun red(text: str) => color(text, color: Color.red);
export fun green(text: str) => color(text, color: Color.green);
export fun yellow(text: str) => color(text, color: Color.yellow);
export fun blue(text: str) => color(text, color: Color.blue);
export fun magenta(text: str) => color(text, color: Color.magenta);
export fun cyan(text: str) => color(text, color: Color.cyan);
export fun white(text: str) => color(text, color: Color.white);
export fun onblack(text: str) => color(text, color: Color.onblack);
export fun onred(text: str) => color(text, color: Color.onred);
export fun ongreen(text: str) => color(text, color: Color.ongreen);
export fun onyellow(text: str) => color(text, color: Color.onyellow);
export fun onblue(text: str) => color(text, color: Color.onblue);
export fun onmagenta(text: str) => color(text, color: Color.onmagenta);
export fun oncyan(text: str) => color(text, color: Color.oncyan);
export fun onwhite(text: str) => color(text, color: Color.onwhite);

export object Tester {
    tests: mut [bool] = mut [],
    asserts: mut [bool] = mut [],
    elapsed: double = 0.0,
    beforeAll: fun (t: Tester) > void?,
    beforeEach: fun (t: Tester) > void?,
    afterAll: fun (t: Tester) > void?,
    afterEach: fun (t: Tester) > void?,

    static fun init(
        beforeAll: fun (t: Tester) > void?,
        beforeEach: fun (t: Tester) > void?,
        afterAll: fun (t: Tester) > void?,
        afterEach: fun (t: Tester) > void?
    ) > mut Tester {
        final t = mut Tester{
            beforeAll = beforeAll,
            beforeEach = beforeEach,
            afterAll = afterAll,
            afterEach = afterEach,
        };

        if (t.beforeAll -> beforeAll) {
            beforeAll(t);
        }

        return t;
    }

    mut fun reset() > void {
        this.tests = mut [];
        this.asserts = mut [];
        this.elapsed = 0.0;
    }

    fun failedAsserts() > int {
        return this.asserts.reduce::<int>(
            fun (_: int, success: bool, accumulator: int)
                => accumulator + if (success) 0 else 1,
            initial: 0,
        );
    }

    fun failedTests() > int {
        return this.tests.reduce::<int>(
            fun (_: int, success: bool, accumulator: int)
                => accumulator + if (success) 0 else 1,
            initial: 0,
        );
    }

    fun succeededTests() > int {
        return this.tests.reduce::<int>(
            fun (_: int, success: bool, accumulator: int)
                => accumulator + if (success) 1 else 0,
            initial: 0,
        );
    }

    mut fun it(message: str, fn: fun () > void) > void {
        final startTime = os\time();

        io\stdout.write(yellow("▶ Test: {message}\n")) catch void;

        if (this.beforeEach -> beforeEach) {
            beforeEach(this);
        }

        final previousFailCount = this.failedAsserts();
        fn();

        if (this.afterEach -> afterEach) {
            afterEach(this);
        }

        this.tests.append(previousFailCount == this.failedAsserts());

        this.elapsed = this.elapsed + (os\time() - startTime);
    }

    fun summary() > void {
        if (this.afterAll -> afterAll) {
            afterAll(this);
        }

        final failed = this.failedTests();

        io\stdout.write("\n") catch void;

        foreach (testStatus in this.tests) {
            if (testStatus) {
                io\stdout.write(green("●")) catch void;
            } else {
                io\stdout.write(yellow("●")) catch void;
            }
        }

        io\stdout.write(
            green("\n{this.succeededTests()}")
            + dim(" successes, ")
            + yellow("{failed}")
            + dim(" failures in ")
            + "{this.elapsed / 1000.0}"
            + dim(" seconds\n")
        ) catch void;

        if (failed > 0) {
            os\exit(1);
        }
    }

    fun report(error: str?, message: str?) > void {
        io\stderr.write(red("  Assert failed: {message ?? ""}") + dim("\n    {error}\n")) catch void;
    }

    fun assert(condition: bool, error: str?, message: str?) > void {
        if (!condition) {
            this.report(error, message: message);

            this.asserts.append(false);
        } else {
            this.asserts.append(true);
        }
    }

    fun assertEqual::<T>(actual: T, expected: T, message: str?) > void {
        this.assert(
            actual == expected,
            error: "expected `{expected}` got `{actual}`",
            message: message
        );
    }

    fun assertNotEqual::<T>(actual: T, expected: T, message: str?) > void {
        this.assert(
            actual != expected,
            error: "expected `{expected}` got `{actual}`",
            message: message
        );
    }

    fun assertAreEqual::<T>(values: [T], message: str?) > void {
        if (values.len() < 2) {
            return;
        }

        var equal = true;
        var previous = values[0];
        foreach (value in values) {
            if (value != previous) {
                equal = false;
                break;
            }

            previous = value;
        }

        this.assert(
            equal,
            error: "one element is not equal",
            message: message
        );
    }

    fun assertAreNotEqual::<T>(values: [T], message: str?) > void {
        if (values.len() < 2) {
            return;
        }

        var equal = true;
        var previous = values[0];
        foreach (i, value in values) {
            if (i > 0 and value == previous) {
                equal = false;
                break;
            }

            previous = value;
        }

        this.assert(
            equal,
            error: "one element is equal",
            message: message
        );
    }

    fun assertOfType::<T>(value: any, message: str?) > void {
        this.assert(
            !(value is T),
            error: "`{value}` type is `{typeof value}`",
            message: message
        );
    }

    fun assertThrows::<T>(fn: fun () > void !> T, message: str?) > void {
        try {
            fn();
        } catch (error: any) {
            this.assertOfType::<T>(error, message: message);
            return;
        }

        this.assert(false, error: "Did not throw", message: message);
    }

    fun assertDoesNotThrow::<T>(fn: fun () > void, message: str?) > void {
        try {
            fn();
        } catch (error: any) {
            if (error is T) {
                this.assert(false, error: "Did throw", message: message);
                return;
            }
        }
    }
}
