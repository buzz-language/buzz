namespace serialize;

import "buffer";
import "std";

/// Utility object to manage deserialized data from, for example, decoded JSON
export object Boxed {
    data: any = null,

    static fun init(data: any) > Boxed !> CircularReference, NotSerializable {
        return Boxed{
            data = serializeValue(data),
        };
    }

    /// When wrapped data is a string
    fun string() > str? {
        return this.data as? str;
    }

    /// When wrapped data is a boolean
    fun boolean() > bool? {
        return this.data as? bool;
    }

    /// When wrapped data is a int
    fun integer() > int? {
        return this.data as? int;
    }

    /// When wrapped data is a double
    fun doubleing() > double? {
        return this.data as? double;
    }

    /// When wrapped data is an object, object property values are themselves wrapped in a `Boxed`
    fun map() > {str: Boxed}? {
        if (this.data as? {str: any} -> dataMap) {
            var boxedMap: mut {str: Boxed} = mut {};

            foreach (key, value in dataMap) {
                boxedMap[key] = Boxed{ data = value };
            }

            return boxedMap;
        }

        return null;
    }

    /// When wrapped data is a list, list elements are themselves warpped in a `Boxed`
    fun list() > [Boxed]? {
        if (this.data as? [any] -> dataList) {
            var boxedList: mut [Boxed] = mut [];

            foreach (element in dataList) {
                boxedList.append(Boxed{ data = element });
            }

            return boxedList;
        }

        return null;
    }

    /// @return wrapped data string value or empty string if not a string
    fun stringValue() > str => this.string() ?? ""
    /// @return wrapped data boolean value or `false` if not a boolean
    fun booleanValue() > bool => this.boolean() ?? false
    /// @return wrapped data number value or `0` if not an integer
    fun integerValue() > int => this.integer() ?? 0
    /// @return wrapped data number value or `0` if not a double
    fun doubleingValue() > double => this.doubleing() ?? 0.0
    /// @return wrapped data map value or empty map if not a map
    fun mapValue() > {str: Boxed} => this.map() ?? {<str: Boxed>}
    /// @return wrapped data list value or empty list if not a list
    fun listValue() > [Boxed] => this.list() ?? [<Boxed>]

    /// Query the json element at `path`, if nothing matches return `Boxed{}`
    /// @param path Path to query
    /// @return Found `Boxed` or `Boxed{}` (which is `null`)
    fun q(path: [str]) > Boxed {
        if (this.map() -> map) {
            if (path.len() > 1) {
                return (map[path[0]] ?? Boxed{}).q(path.sub(1));
            } else if (path.len() > 0) {
                return map[path[0]] ?? Boxed{};
            } else {
                return this;
            }
        }

        return Boxed{};
    }
}

export object CircularReference {
    message: str = "Circular reference",
}

export object NotSerializable {
    message: str = "Not serializable",
}

export extern fun serializeValue(value: any) > any !> CircularReference, NotSerializable;

export object JsonParseError {
    message: str? = null,
}

/// Parse JSON string into a `Json` tree
/// @private
object JsonParser {
    // TODO: comform to https://datatracker.ietf.org/doc/html/rfc8259

    source: str,
    offset: int = 0,

    mut fun advance() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        var char = this.source[this.offset];

        this.offset = this.offset + 1;

        return char;
    }

    fun peek() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        return this.source[this.offset];
    }

    mut fun match(expected: str) > bool {
        if (this.offset > this.source.len() or this.source[this.offset] != expected) {
            return false;
        }

        this.offset = this.offset + 1;

        return true;
    }

    mut fun consume(expected: str) > void !> JsonParseError {
        if (!this.match(expected)) {
            throw JsonParseError{ message = "Could not parse JSON: expected `{expected}` got `{this.peek()}` at offset {this.offset}" };
        }
    }

    mut fun skipWhitespaces() > void {
        while (true) {
            final char = this.peek();

            if (char == " " or char == "\r" or char == "\t" or char == "\n") {
                _ = this.advance();
            } else {
                return;
            }
        }
    }

    mut fun next() > any !> JsonParseError, buffer\WriteWhileReadingError {
        this.skipWhitespaces();

        if (this.offset >= this.source.len()) {
            throw JsonParseError{ message = "Could not parse JSON: end of string" };
        }

        final char = this.advance() ?? "";
        final byte = char.byte(0);
        if (char == "[") {
            return this.array();
        } else if (char == "\{") {
            return this.map();
        } else if ((byte >= "0".byte(0) and byte <= "9".byte(0)) or char == "-") {
            return this.number(char);
        } else if (char == "\"") {
            return this.string();
        } else if (this.source.sub(this.offset - 1, len: 4) == "true") {
            this.offset = this.offset + 3;
            return true;
        } else if (this.source.sub(this.offset - 1, len: 5) == "false") {
            this.offset = this.offset + 4;
            return false;
        } else if (this.source.sub(this.offset - 1, len: 4) == "null") {
            this.offset = this.offset + 3;
            return null;
        }

        throw JsonParseError{ message = "Could not parse JSON: unexpected character `{char}` at offset {this.offset}" };
    }

    mut fun array() > [any] !> JsonParseError, buffer\WriteWhileReadingError {
        var array: mut [any] = mut [];

        while (true) {
            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            }
                
            array.append(this.next());

            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            } 

            this.consume(",");
        }

        return array.cloneImmutable();
    }

    mut fun map() > {str: any} !> JsonParseError, buffer\WriteWhileReadingError {
        var map: mut {str: any} = mut {};

        while (true) {
            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume("\"");
            final key = this.string();

            this.skipWhitespaces();

            this.consume(":");

            this.skipWhitespaces();

            map[key] = this.next();

            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume(",");
        }

        return map.cloneImmutable();
    }

    mut fun number(parsed: str) > any !> JsonParseError {
        var number = parsed;

        var isDouble = false;
        while (std\parseInt(this.peek() ?? "NaN") != null or this.peek() == ".") {
            var char = this.advance();

            if (char == null) {
                break;
            }

            if (char == ".") {
                isDouble = true;
            }

            number = number + char!;
        }

        if (isDouble) {
            if (std\parseDouble(number) -> doubleing) {
                return doubleing;
            }
        } else if (std\parseInt(number) -> integer) {
            return integer;
        }
        
        throw JsonParseError{ message = "Could not parse JSON: `{number}` is not a number" };
    }

    mut fun string() > str !> buffer\WriteWhileReadingError {
        var char = this.advance();
        var string = buffer\Buffer.init();
        
        while (char != null and char != "\"") {
            if (char == "\\") {
                if (this.match("\"")) {
                    string.write("\"");
                } else if (this.match("\\")) {
                    string.write("\\");
                } else if (this.match("n")) {
                    string.write("\n");
                } else if (this.match("t")) {
                    string.write("\t");
                } else if (this.match("r")) {
                    string.write("\r");
                }
            } else {
                string.write(char!);
            }

            char = this.advance();
        }

        var result = string.toString();

        return result;
    }
}

/// Encode to a JSON string
/// @return the JSON string
export fun jsonEncode(data: Boxed) > str !> CircularReference, NotSerializable {
    if (data.string() -> string) {
        return "\"{string}\"";
    } else if (data.boolean() -> boolean) {
        return "{boolean}";
    } else if (data.integer() -> integer) {
        return "{integer}";
    } else if (data.doubleing() -> doubleing) {
        return "{doubleing}";
    } else if (data.map() -> map) {
        var json = "\{";
        final size = map.size();
        var count = 0;
        foreach (key, value in map) {
            json = json + "\"{key}\":{jsonEncode(value)}";

            if (count < size - 1) {
                json = json + ",";
            }

            count = count + 1;
        }
        return json + "}";
    } else if (data.list() -> list) {
        var json = "[";

        final len = list.len();
        foreach (i, value in list) {
            json = json + jsonEncode(value);

            if (i < len - 1) {
                json = json + ",";
            }
        }

        return json + "]";
    }

    return "null";
}

/// Decode string into a Json instance
/// @param str json The JSON string
/// @return Boxed
export fun jsonDecode(json: str) > Boxed !> JsonParseError, buffer\WriteWhileReadingError {
    return Boxed{
        data = (mut JsonParser{
            source = json
        }).next()
    };
}
