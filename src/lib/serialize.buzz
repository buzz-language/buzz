import "std";
import "buffer";

|| Utility object to manage deserialized data from, for example, decoded JSON
export object Boxed {
    any data = null,

    static fun init(any data) > Boxed !> CircularReference, NotSerializable {
        return Boxed{
            data = serialize(data),
        };
    }

    || When wrapped data is a string
    fun string() > str? {
        return this.data as? str;
    }

    || When wrapped data is a boolean
    fun boolean() > bool? {
        return this.data as? bool;
    }

    || When wrapped data is a int
    fun integer() > int? {
        return this.data as? int;
    }

    || When wrapped data is a float
    fun floating() > float? {
        return this.data as? float;
    }

    || When wrapped data is an object, object property values are themselves wrapped in a `Boxed`
    fun map() > {str: Boxed}? {
        if (this.data as? {str: any} -> dataMap) {
            {str: Boxed} boxedMap = {<str: Boxed>};

            foreach (str key, any value in dataMap) {
                boxedMap[key] = Boxed{ data = value };
            }

            return boxedMap;
        }

        return null;
    }

    || When wrapped data is a list, list elements are themselves warpped in a `Boxed`
    fun list() > [Boxed]? {
        if (this.data as? [any] -> dataList) {
            [Boxed] boxedList = [<Boxed>];

            foreach (any element in dataList) {
                boxedList.append(Boxed{ data = element });
            }

            return boxedList;
        }

        return null;
    }

    || @return wrapped data string value or empty string if not a string
    fun stringValue() > str -> this.string() ?? ""
    || @return wrapped data boolean value or `false` if not a boolean
    fun booleanValue() > bool -> this.boolean() ?? false
    || @return wrapped data number value or `0` if not an integer
    fun integerValue() > int -> this.integer() ?? 0
    || @return wrapped data number value or `0` if not a float
    fun floatingValue() > float -> this.floating() ?? 0.0
    || @return wrapped data map value or empty map if not a map
    fun mapValue() > {str: Boxed} -> this.map() ?? {<str: Boxed>}
    || @return wrapped data list value or empty list if not a list
    fun listValue() > [Boxed] -> this.list() ?? [<Boxed>]

    || Query the json element at `path`, if nothing matches return `Boxed{}`
    || @param path Path to query
    || @return Found `Boxed` or `Boxed{}` (which is `null`)
    fun q([str] path) > Boxed {
        if (this.map() -> map) {
            if (path.len() > 1) {
                return (map[path[0]] ?? Boxed{}).q(path.sub(1));
            } else if (path.len() > 0) {
                return map[path[0]] ?? Boxed{};
            } else {
                return this;
            }
        }

        return Boxed{};
    }
}

export object CircularReference {
    str message = "Circular reference",
}

export object NotSerializable {
    str message = "Not serializable",
}

export extern fun serialize(any value) > any !> CircularReference, NotSerializable;

export object JsonParseError {
    str? message = null,
}

|| Parse JSON string into a `Json` tree
|| @private
object JsonParser {
    | TODO: comform to https://datatracker.ietf.org/doc/html/rfc8259

    str source,
    int offset = 0,

    fun advance() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        str char = this.source[this.offset];

        this.offset = this.offset + 1;

        return char;
    }

    fun peek() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        return this.source[this.offset];
    }

    fun match(str expected) > bool {
        if (this.offset > this.source.len() or this.source[this.offset] != expected) {
            return false;
        }

        this.offset = this.offset + 1;

        return true;
    }

    fun consume(str expected) > void !> JsonParseError {
        if (!this.match(expected)) {
            throw JsonParseError{ message = "Could not parse JSON: expected `{expected}` got `{this.peek()}` at offset {this.offset}" };
        }
    }

    fun skipWhitespaces() > void {
        while (true) {
            const str? char = this.peek();

            if (char == " " or char == "\r" or char == "\t" or char == "\n") {
                _ = this.advance();
            } else {
                return;
            }
        }
    }

    fun next() > any !> JsonParseError, WriteWhileReadingError {
        this.skipWhitespaces();

        if (this.offset >= this.source.len()) {
            throw JsonParseError{ message = "Could not parse JSON: end of string" };
        }

        const str char = this.advance() ?? "";
        const int byte = char.byte(0);
        if (char == "[") {
            return this.array();
        } else if (char == "\{") {
            return this.map();
        } else if ((byte >= "0".byte(0) and byte <= "9".byte(0)) or char == "-") {
            return this.number(char);
        } else if (char == "\"") {
            return this.string();
        } else if (this.source.sub(this.offset - 1, len: 4) == "true") {
            this.offset = this.offset + 3;
            return true;
        } else if (this.source.sub(this.offset - 1, len: 5) == "false") {
            this.offset = this.offset + 4;
            return false;
        } else if (this.source.sub(this.offset - 1, len: 4) == "null") {
            this.offset = this.offset + 3;
            return null;
        }

        throw JsonParseError{ message = "Could not parse JSON: unexpected character `{char}` at offset {this.offset}" };
    }

    fun array() > [any] !> JsonParseError, WriteWhileReadingError {
        [any] array = [<any>];

        while (true) {
            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            }
                
            array.append(this.next());

            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            } 

            this.consume(",");
        }

        return array;
    }

    fun map() > {str: any} !> JsonParseError, WriteWhileReadingError {
        {str: any} map = {<str: any>};

        while (true) {
            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume("\"");
            const str key = this.string();

            this.skipWhitespaces();

            this.consume(":");

            this.skipWhitespaces();

            map[key] = this.next();

            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume(",");
        }

        return map;
    }

    fun number(str parsed) > any !> JsonParseError {
        str number = parsed;

        bool isFloat = false;
        while (parseInt(this.peek() ?? "NaN") != null or this.peek() == ".") {
            str? char = this.advance();

            if (char == null) {
                break;
            }

            if (char == ".") {
                isFloat = true;
            }

            number = number + char!;
        }

        if (isFloat) {
            if (parseFloat(number) -> floating) {
                return floating;
            }
        } else if (parseInt(number) -> integer) {
            return integer;
        }
        
        throw JsonParseError{ message = "Could not parse JSON: `{number}` is not a number" };
    }

    fun string() > str !> WriteWhileReadingError {
        str? char = this.advance();
        Buffer string = Buffer.init();
        
        while (char != null and char != "\"") {
            if (char == "\\") {
                if (this.match("\"")) {
                    string.write("\"");
                } else if (this.match("\\")) {
                    string.write("\\");
                } else if (this.match("n")) {
                    string.write("\n");
                } else if (this.match("t")) {
                    string.write("\t");
                } else if (this.match("r")) {
                    string.write("\r");
                }
            } else {
                string.write(char!);
            }

            char = this.advance();
        }

        str result = string.toString();

        return result;
    }
}

|| Encode to a JSON string
|| @return the JSON string
export fun jsonEncode(Boxed data) > str !> CircularReference, NotSerializable {
    if (data.string() -> string) {
        return "\"{string}\"";
    } else if (data.boolean() -> boolean) {
        return "{boolean}";
    } else if (data.integer() -> integer) {
        return "{integer}";
    } else if (data.floating() -> floating) {
        return "{floating}";
    } else if (data.map() -> map) {
        str json = "\{";
        const int size = map.size();
        int count = 0;
        foreach (str key, Boxed value in map) {
            json = json + "\"{key}\":{jsonEncode(value)}";

            if (count < size - 1) {
                json = json + ",";
            }

            count = count + 1;
        }
        return json + "}";
    } else if (data.list() -> list) {
        str json = "[";

        const int len = list.len();
        foreach (int i, Boxed value in list) {
            json = json + jsonEncode(value);

            if (i < len - 1) {
                json = json + ",";
            }
        }

        return json + "]";
    }

    return "null";
}

|| Decode string into a Json instance
|| @param str json The JSON string
|| @return Boxed
export fun jsonDecode(str json) > Boxed !> JsonParseError, WriteWhileReadingError {
    return Boxed{
        data = JsonParser{
            source = json
        }.next()
    };
}