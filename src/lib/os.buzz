namespace os;

import "errors";

/// Sleep for the given amount of ms
export extern fun sleep(ms: double) > void;

/// @return epoch time in ms
export extern fun time() > double;

/// Returns environment variable under `key`
/// @param key environment variable name
export extern fun env(key: str) > str?;

/// @return path to system temp directory
export extern fun tmpDir() > str;

/// @param prefix prefix to the temp file name
/// @return a temporary file name in system tmp dir
export extern fun tmpFilename(prefix: str?) > str;

/// Exit program with `exitCode`
/// @param exitCode exit code
extern fun buzzExit(exitCode: int) > void;

export buzzExit as exit;

/// Execute command and return its exit code
/// @param command command to execute
/// @return exit code of the command
export extern fun execute(command: [str]) > int !> errors\FileSystemError, errors\UnexpectedError;

/// @private
extern fun SocketConnect(address: str, port: int, netProtocol: int) > int !> errors\InvalidArgumentError, errors\SocketError, errors\NotYetImplementedError;
/// @private
extern fun SocketClose(fd: int) > void;
/// @private
extern fun SocketRead(fd: int, n: int) > str? !> errors\InvalidArgumentError, errors\FileSystemError, errors\ReadWriteError, errors\UnexpectedError;
/// @private
extern fun SocketWrite(fd: int, bytes: str) > void !> errors\FileSystemError, errors\ReadWriteError, errors\UnexpectedError;
/// @private
extern fun SocketServerStart(address: str, port: int, reuseAddr: bool) > int !> errors\InvalidArgumentError, errors\SocketError, errors\UnexpectedError, errors\FileSystemError;
/// @private
extern fun SocketServerAccept(fd: int) > int !> errors\SocketError, errors\UnexpectedError;
/// @private
extern fun SocketReadLine(fd: int, maxSize: int?) > str? !> errors\FileSystemError, errors\UnexpectedError, errors\ReadWriteError;
/// @private
extern fun SocketReadAll(fd: int, maxSize: int?) > str? !> errors\FileSystemError, errors\UnexpectedError, errors\ReadWriteError;

/// Protocols supported over a socket
export enum SocketProtocol {
    tcp,
    udp,
    ipc,
}

/// A socket
export object Socket {
    /// @private
    fd: int,

    /// Opens a socket
    /// @param address A string containing either a IPv4, IPv6 or path to a socket file (IPC)
    /// @param port Port to which to connect
    /// @param protocol Protocol to use
    /// @return A new `Socket` opened and ready to use
    static fun connect(address: str, port: int = 0, netProtocol: SocketProtocol) > Socket !> errors\InvalidArgumentError, errors\SocketError, errors\NotYetImplementedError {
        return Socket{
            fd = SocketConnect(address, port: port, netProtocol: netProtocol.value),
        };
    }

    /// Close the socket
    fun close() > void {
        SocketClose(this.fd);
    }

    /// Receive at most `n` bytes from the socket
    /// @param n How many bytes we're prepare to receive
    /// @return The bytes received or null if nothing to read
    fun receive(n: int) > str? !> errors\InvalidArgumentError, errors\FileSystemError, errors\ReadWriteError, errors\UnexpectedError {
        return SocketRead(this.fd, n: n);
    }

    /// Receive from socket until it's closed or a linefeed is received
    /// @return The bytes received or null if nothing to read
    fun receiveLine(maxSize: int?) > str? !> errors\FileSystemError, errors\UnexpectedError, errors\ReadWriteError {
        return SocketReadLine(this.fd, maxSize);
    }

    /// Receive from socket until it's closed
    /// @return The bytes received or null if nothing to read
    fun receiveAll(maxSize: int?) > str? !> errors\FileSystemError, errors\UnexpectedError, errors\ReadWriteError {
        return SocketReadAll(this.fd, maxSize);
    }

    /// Send bytes on the socket
    /// @param bytes Bytes to send
    fun send(bytes: str) > void !> errors\FileSystemError, errors\ReadWriteError, errors\UnexpectedError {
        SocketWrite(this.fd, bytes: bytes);
    }
}

/// A TCP Server
export object TcpServer {
    /// @private
    serverSocket: Socket,
    /// @private
    reuseAddr: bool,

    /// Starts a TCP server
    /// @param address Address to listen on
    /// @param port Port to listen on
    /// @param reuseAddr Wether we want to accept multiple connections
    /// @return New `TcpServer` bound to `<address>:<port>`
    static fun init(address: str, port: int, reuseAddr: bool)
        > TcpServer
        !> errors\SocketError,
           errors\UnexpectedError,
           errors\InvalidArgumentError,
           errors\FileSystemError {
        return TcpServer{
            serverSocket = Socket{
                fd = SocketServerStart(address, port: port, reuseAddr: reuseAddr),
            },
            reuseAddr = reuseAddr,
        };
    }

    /// Accept a new connection
    /// @return Socket opened with the client
    fun accept() > Socket !> errors\SocketError, errors\UnexpectedError {
        return Socket{
            fd = SocketServerAccept(this.serverSocket.fd),
        };
    }

    /// Close server
    fun close() > void {
        this.serverSocket.close();
    }
}

export SocketProtocol;
export Socket;
export TcpServer;
