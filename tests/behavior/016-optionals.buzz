import "std";

test "Optional force unwrapping with `!`" {
    // Note: trying to force unwrap a null value raises an uncatchable error
    // Dart allows to catch an null unwrap but swift doesn't
    // I think it's saner for it to not be catchable but to provides safe way to unwrap it
    final hello: str? = "hello world";

    std\assert(hello! == "hello world", message: "Could force unwrap an optional");
}

test "Optional graceful unwrapping with `?`" {
    final optList: [int]? = [ 1, 2, 3 ];

    std\assert(optList?.len() == 3, message: "could unwrap optList");
}

object Me {
    list: [int]?,
}

test "Optional chaining" {
    final me: Me? = Me{
        list = [ 1, 2, 3 ],
    };

    std\assert(me?.list?.len() == 3, message: "chaining optionals work");

    final you: Me? = null;

    std\assert(you?.list?.len() == null, message: "chaining optionals work");
}

test "Null coalescing operator" {
    final hello: str? = null;

    std\assert(hello ?? "world" == "world", message: "null coalescing");
}

test "Unwrap map subscript" {
    final map = {
        "yo": "lo",
        "mo": "jo",
    };

    std\assert(map["yo"]?.len() == 2, message: "could unwrap map subscript");
}

object You {
    name: str = "joe",
}

test "Field access on map subscript" {
    final map = {
        "yo": You{},
    };

    std\assert(map["yo"]?.name == "joe", message: "could field access map subscript");
}

object A {
    static instance: A?;
    msg: str,

    fun hello() > str {
        return this.msg;
    }
}

test "Check ahead" {
    A.instance = A{ msg = "hello" };

    _ = A.instance?.hello();
}

object AA {
    data: int,

    fun eql(other: AA?) > bool {
        return this.data == other?.data;
    }
}

object BB {
    data: AA?,

    fun eql(other: BB?) > bool? {
        return this.data?.eql(other?.data);
    }
}
