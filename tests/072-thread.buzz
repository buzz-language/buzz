import "std";
import "thread" as _;

| FIXME: this is failing because we create a fiber per thread where we should create a whole VM per thread
| But then how could the function refer to the same globals as its parents?
| We'd have to copy: globals (deeply), strings and types
test "Spawning multiple threads and use mutex" {
    [int?] sums = [];
    foreach (int _ in 0..10) {
        sums.append(null);
    }

    var mutex = initMutex();
    [Thread] pool = [];
    foreach (int n in 0..10) {
        pool.append(
            Thread.spawn(
                function: fun (int threadId, int n) > void {
                    int sum = 0;
                    foreach (int i in 0..n) {
                        sum = sum + i;
                    }

                    std.print("{threadId} sum is {sum}");

                    lockMutex(mutex);

                    sums[threadId] = sum;

                    unlockMutex(mutex);
                },
                arguments: [ n, 10 ],
            )
        );
    }

    foreach (Thread thread in pool) {
        thread.join();
    }

    collectMutex(mutex);

    foreach (int? sum in sums) {
        std.assert(sum == 45, message: "could run multiple threads");
    }
}