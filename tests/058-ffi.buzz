import "std";
import "buffer" as _;
import "ffi";

zdef("tests/utils/libforeign", `
    fn acos(value: f64) f64;
    fn fprint(msg: [*:0]const u8) void;
    fn sum(values: [*]i32, len: i32) i32;
`);

test "scalar type" {
    std\assert(acos(0.12) == 1.4505064444001086, message: "Could call FFI function with scalar arguments");
}

test "cstring" {
    fprint(ffi\cstr("hello world"));
}

test "pointer with Buffer" {
    final buffer = Buffer.init();

    buffer.writeZ::<int>("i32", values: [1, 2, 3]);
    buffer.writeZ::<int>("i32", values: [1, 2, 3]);

    try {
        // Arguably, the zig type parameter could a constant and be built at compile time
        // But: that would require a new type
        // Since we cache the result of the type parsing this is roughly equivalent
        buffer.writeZ::<int>("u64", values: [1]);
        std\assert(false, message: "Using bad buzz type triggers error");
    } catch (_: ffi\FFITypeMismatchError) {
        std\assert(true, message: "Using bad buzz type triggers error");
    }

    final i32align = ffi\alignOf("i32");
    final len = buffer.len(align: i32align);
    std\assert(len == buffer.len() / 4, message: "Len align");
    final total = sum(buffer.ptr(), len: len);

    std\assert(total == 12, message: "Could call FFI function with pointer argument");

    var readTotal = 0;
    foreach (i in 0..buffer.len(align: i32align)) {
        readTotal = readTotal + buffer.readZAt::<int>(
            at: i,
            zigType: "i32"
        );
    }

    std\assert(readTotal == total, message: "Could read from pointer");

    final subTotal = sum(buffer.ptr(1, align: i32align), len: len - 1);

    std\assert(subTotal == 11, message: "Could get ptr at offset");
}

zdef("tests/utils/libforeign", `
    const Data = extern struct {
        id: i32,
        msg: [*:0]const u8,
        value: f64,
    };

    fn get_data_msg(data: *Data) [*:0]const u8;
    fn set_data_id(data: *Data) void;
`);

test "struct" {
    final data = Data{
        msg = ffi\cstr("bye world"),
        id = 123,
        value = 42.0,
    };

    std\assert(data.msg == "bye world\0", message: "Could instanciate Zig struct");
    std\assert(data.id == 123, message: "Could instanciate Zig struct");

    data.id = 42;

    std\assert(data.id == 42, message: "Could set Zig struct field");

    std\assert(get_data_msg(data) == "bye world\0", message: "Could use foreign function with struct ptr param");

    set_data_id(data);

    std\assert(data.id == 84, message: "Could use foreign function with struct ptr param that modifies the struct");
}

test "write/read struct in buffer" {
    final data = Data{
        msg = ffi\cstr("bye world"),
        id = 123,
        value = 42.0,
    };

    final buffer = Buffer.init();

    buffer.writeStruct::<Data>(Data, values: [data]);

    std\assert(buffer.toString().len() == ffi\sizeOfStruct(Data), message: "Could write struct to buffer");

    final read = buffer.readStruct::<Data>(Data);

    std\assert(
        read.msg == data.msg and read.id == data.id,
        message: "Could read struct from buffer"
    );
}

zdef("tests/utils/libforeign", `
    pub const Flag = extern struct {
        id: i32,
        value: bool,
    };

    pub const Misc = extern union {
        id: i32,
        data: Data,
        flag: Flag,
    };

    fn get_misc_msg(misc: *Misc) [*:0]const u8;
    fn get_misc_flag(misc: *Misc) bool;
    fn set_misc_id(misc: *Misc, new_id: i32) void;
`);

test "union" {
    final misc = Misc{
        data = Data{
            id = 123,
            msg = ffi\cstr("hello world"),
            value = 42.0,
        }
    };

    std\print(ffi\rawData(misc).hex());
    std\print("value = {misc.data.value}");

    std\assert(get_misc_msg(misc) == ffi\cstr("hello world"), message: "Could read union field");

    misc.flag = Flag{
        id = 123,
        value = true,
    };

    std\print(ffi\rawData(misc).hex());

    std\assert(get_misc_flag(misc), message: "Could read union field");

    misc.id = 321;

    std\print(ffi\rawData(misc).hex());

    std\assert(misc.id == 321, message: "Got expected memory layout of a C union");
    std\assert(misc.data.id == 321, message: "Got expected memory layout of a C union");
    std\assert(misc.flag.id == 321, message: "Got expected memory layout of a C union");
}
