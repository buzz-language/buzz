import "std";

fun willFail() > void !> str {
    throw "Yolo";
}

fun partialCatch() > void !> str {
    try {
        willFail();

        throw 12;
    } catch (int _) {
        assert(false, message: "unreachable");
    }
}

fun returnFromCatch() > int {
    try {
        willFail();

        return 12;
    } catch (str _) {
        return 21;
    }

    return 31;
}

test "Try catch" {
    str setme = "";

    try {
        str _ = "i'm local to this try block";

        setme = "yes";

        willFail();

        partialCatch();

        assert(false, message: "unreachable");
    } catch (str error) {
        str _ = "a local in catch clause";

        assert(error == "Yolo", message: "caught error");
    } catch (int _) {
        assert(false, message: "unreachable");
    } catch {
        assert(false, message: "unreachable");
    }

    str afterLocal = "bye";

    assert(setme == "yes", message: "error was handled and code continues");

    assert(returnFromCatch() == 21, message: "return from catch clause works");

    assert(afterLocal == "bye", message: "catch closed its scope");
}