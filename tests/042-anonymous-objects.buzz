import "lib/std";

fun getInfo() > obj{ str name, int age } {
    return .{
        name = "Joe",
        age = 36,
    };
}

test "Anonymous objects" {
    obj{ str name, int age } info = getInfo();
    | Two anonymous type matches
    obj{ str name, int age } info2 = info;

    assert(info.name == "Joe" and info.age == 36, message: "Could declare, instanciate and acces anonymous objects");
    assert(info is obj{ str name, int age },  message: "Type safety works with anonymous object");
}

fun getPayload(<T>, T data) > obj{ T data } {
    return .{
        data = data
    };
}

test "Anonymous object with generics" {
    obj{ int data } payload = getPayload(<int>, 42);

    assert(payload.data == 42, message: "Could use anonymous object with generic");
}