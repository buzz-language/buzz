import "std";

test "ternary" {
    int value = if (true) 12 else 0;

    assert(value == 12, message: "could use constant inline if");

    value = if ("hello".len() == 2) 0 else 12;

    assert(value == 12, message: "could use inline if");
}

test "multiple branches" {
    const value = 12;

    const expr = if (value == 14)
        "hello"
    else if (value == 12)
        "yolo"
    else
        null;

    assert(expr == "yolo", message: "Could use multiple branches with inline if");
}

test "unwrap" {
    str? opt = "hello";

    const _ = 12;

    const expr = if (opt -> hello)
        hello
    else
        "bye";
    
    assert(expr == "hello", message: "Could unwrap optional in inline if");
}

test "cast" {
    const any unknown = "hello";

    const expr = if (unknown as str hello)
        hello
    else
        "bye";
    
    assert(expr == "hello", message: "Could cast in inline if");
}

test "cast to unwrap null" {
    const str? unknown = null;

    const expr = if (unknown as str hello)
        hello
    else
        "hello";
    
    assert(expr == "hello", message: "Could unwrap optional using cas in inline if");
}

test "cast to unwrap null" {
    const str? unknown = "hello";

    const expr = if (unknown as str hello)
        hello
    else
        "bye";
    
    assert(expr == "hello", message: "Could unwrap optional using cast in inline if");
}

test "not in a var decl" {
    str? opt = "hello";

    const _ = 12;

    assert(
        (if (opt -> hello)
            hello
        else
            "bye") == "hello",
        message: "Could unwrap optional in inline if in expression"
    );
}