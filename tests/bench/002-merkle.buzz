import "std";
import "math";
import "errors";

object Node {
    left: mut Node? = null,
    right: mut Node? = null,
    value: int? = null,
    hash: int? = null,
}

fun makeTree(depth: int) > mut Node {
    if (depth > 0) {
        return mut Node{
            left = makeTree(depth - 1),
            right = makeTree(depth - 1),
        };
    }

    return mut Node{
        value = 1
    };
}

fun check(tree: Node) > bool {
    if (tree.hash != null) {
        if (tree.value != null) {
            return true;
        } else {
            return check(tree.left!) and check(tree.right!);
        }
    }

    return false;
}

fun calHash(tree: mut Node) > void {
    if (tree.hash == null) {
        if (tree.value -> value) {
            tree.hash = value;
        } else {
            calHash(tree.left!);
            calHash(tree.right!);

            tree.hash = tree.left?.hash ?? 0 + tree.right?.hash ?? 0;
        }
    }
}

fun main(args: [str]) > void !> any {
    final N = std\parseInt(args[?0] ?? "6") ?? 6;

    final mindepth = 4;
    var maxdepth = mindepth + 2;
    if (maxdepth < N) {
        maxdepth = N;
    }

    final stretchdepth = maxdepth + 1;
    final stretchtree = makeTree(stretchdepth);
    calHash(stretchtree);

    std\print("stretch tree of depth {stretchdepth}\t root hash: {stretchtree.hash ?? 0} check: {check(stretchtree)}");

    final longlivedtree = makeTree(maxdepth);
    for (depth: int = mindepth; depth < maxdepth; depth = depth + 2) {
        final iterations = std\toInt(
            math\pow(
                x: 2.0,
                y: std\toDouble(maxdepth - depth + mindepth)
            )
        );
        var sum = 0;
        foreach (_ in 0..iterations) {
            final t = makeTree(depth);
            calHash(t);
            sum = sum + t.hash ?? 0;
        }

        std\print("{iterations}\t trees of depth {depth}\t root hash sum: {sum}");
    }

    calHash(longlivedtree);
    std\print("long lived tree of depth {maxdepth}\t root hash: {longlivedtree.hash ?? 0} check: {check(longlivedtree)}");
}
