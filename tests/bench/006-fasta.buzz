import "lib/std";
import "lib/math";
import "lib/buffer";

const float IM = 139968.0;
const float IA = 3877.0;
const float IC = 29573.0;
const int lineLength = 60;
const int bufferSize = (lineLength + 1) * 1024;

fun makeRepeatFasta(str id, str desc, str s, int nchars) > void {
    print(">{id} {desc}");
    int p = 0;
    int sn = s.len();
    str s2 = s + s;
    for (int i = lineLength; i < nchars; i = i + lineLength) {
        print(s2.sub(p, len: lineLength - 1));
        p = p + lineLength;
        if (p > sn) {
            p = p - sn;
        }
    }
    int tail = nchars % lineLength;
    if (tail > 0) {
        print(s2.sub(p, len: tail - 1));
    }
}

object Frequency {
    Buffer chars,
    [float] probs,
    float last,

    static fun init(Buffer chars, [float] probs, float last) > Frequency {
        Frequency freq = Frequency{
            chars = chars,
            probs = probs,
            last = last,
        };

        freq.makeCumulative();

        return freq;
    }

    fun random(float max) > float {
        this.last = (this.last * IA + IC) % IM;
        return max * this.last * (1.0 / IM);
    }

    fun makeCumulative() > void {
        float cp = 0.0;
        foreach (int i, float prob in this.probs) {
            cp = cp + prob;
            this.probs[i] = cp;
        }
    }

    fun selectRandomIntoBuffer(Buffer buffer, int bufferIndex, int nRandom) > int !> OutOfBoundError, WriteWhileReadingError {
        const int len = this.probs.len();

        for (int rIndex = 0; rIndex < nRandom; rIndex = rIndex + 1) {
            float r = this.random(1.0);
            bool skip = false;
            for (int i = 0; i < len; i = i + 1) {
                if (r < this.probs[i]) {
                    buffer.setAt(bufferIndex, value: this.chars.at(i));
                    bufferIndex = bufferIndex + 1;
                    skip = true;
                    break;
                }
            }

            if (!skip) {
                buffer.setAt(bufferIndex, value: this.chars.at(len - 1));
                bufferIndex = bufferIndex + 1;
            }
        }

        return bufferIndex;
    }
}

fun makeRandomFasta(str id, str desc, Frequency fpf, int nchars) > void !> OutOfBoundError, WriteWhileReadingError {
    print(">{id} {desc}");

    Buffer buffer = Buffer.init(bufferSize);
    int bufferIndex = 0;
    while (nchars > 0) {
        int chunkSize = toInt(min(a: toFloat(lineLength), b: toFloat(nchars)));

        if (bufferIndex == bufferSize) {
            print(buffer.toString().sub(0, len: bufferIndex));
            buffer.deinit();
            buffer = Buffer.init(bufferSize);
            bufferIndex = 0;
        }

        bufferIndex = fpf.selectRandomIntoBuffer(buffer, bufferIndex: bufferIndex, nRandom: chunkSize);
        buffer.setAt(bufferIndex, value: 10);
        bufferIndex = bufferIndex + 1;

        nchars = nchars - chunkSize;
    }

    print(buffer.toString().sub(0, len: bufferIndex));

    buffer.deinit();
}

const str alu = "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
    + "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
    + "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
    + "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
    + "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
    + "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
    + "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";

fun main([str] args) > void !> WriteWhileReadingError, OutOfBoundError {
    int N = 1000;
    if (args.len() > 0) {
        N = parseInt(args[0]) ?? 1000;
    }

    makeRepeatFasta("ONE", desc: "Homo sapiens alu", s: alu, nchars: N * 2);

    Buffer iubChars = Buffer.init();
    iubChars.write("acgtBDHKMNRSVWY");
    const Frequency iub = Frequency.init(
        chars: iubChars,
        probs: [ 0.27, 0.12, 0.12, 0.27, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02 ],
        last: 42.0,
    );

    makeRandomFasta("TWO", desc: "IUB ambiguity codes", fpf: iub, nchars: N * 3);

    Buffer homoSapiensChars = Buffer.init();
    homoSapiensChars.write("acgt");
    const Frequency homoSapiens = Frequency.init(
        chars: homoSapiensChars,
        probs: [ 0.3029549426680, 0.1979883004921, 0.1975473066391, 0.3015094502008 ],
        last: iub.last,
    );

    makeRandomFasta("THREE", desc: "Homo sapiens frequency", fpf: homoSapiens, nchars: N * 5);

    homoSapiensChars.deinit();
    iubChars.deinit();
}