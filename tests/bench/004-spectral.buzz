import "std";
import "math";

fun A(i: double, j: double) > double {
    final ij = i + j - 1.0;
    return 1.0 / (ij * (ij - 1.0) * 0.5 + i);
}

fun Av(x: [double], y: mut [double], N: int) > void {
    for (i: double = 0.0; i < N; i = i + 1.0) {
        var a = 0.0;
        for (j: double = 0.0; j < N; j = j + 1.0) {
            a = a + x[std\toInt(j)] * A(i: i, j: j);
        }
        y[std\toInt(i)] = a;
    }
}

fun Atv(x: [double], y: mut [double], N: int) > void {
    for (i: double = 0.0; i < N; i = i + 1.0) {
        var a = 0.0;
        for (j: double = 0.0; j < N; j = j + 1.0) {
            a = a + x[std\toInt(j)] * A(i: j, j: i);
        }
        y[std\toInt(i)] = a;
    }
}

fun AtAv(x: [double], y: mut [double], t: mut [double], N: int) > void {
    Av(x: x, y: t, N: N);
    Atv(x: t, y: y, N: N);
}

fun main(args: [str]) > void {
    final N = std\parseInt(args[?0] ?? "100") ?? 100;

    final u: mut [double] = mut [];
    final v: mut [double] = mut [];
    final t: mut [double] = mut [];
    foreach (_ in 0..N) {
        u.append(1.0);
        v.append(0.0);
        t.append(0.0);
    }

    foreach (_ in 0..10) {
        AtAv(x: u, y: v, t: t, N: N);
        AtAv(x: v, y: u, t: t, N: N);
    }

    var vBv = 0.0;
    var vv = 0.0;
    foreach (i in 0..N) {
        final ui = u[i];
        final vi = v[i];
        vBv = vBv + ui * vi;
        vv = vv + vi * vi;
    }

    std\print("{math\sqrt(vBv / vv)}");
}
