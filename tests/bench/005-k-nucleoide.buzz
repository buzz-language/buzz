import "std";
import "io";
import "errors";

fun readSequence() > str !> errors\ReadWriteError, errors\FileSystemError, errors\UnexpectedError {
    var skippedIgnoredSequences = false;
    final lines: mut [str] = mut [];
    for (line: str? = ""; line != null; line = io\stdin.readLine()) { // catch null doesn't work
        if (!skippedIgnoredSequences) {
            if (line?.startsWith(">THREE") ?? true) {
                skippedIgnoredSequences = true;
            }
        } else {
            final c = line?[0] ?? "_";
            if (c == ">") {
                break;
            } else if (c != ";") {
                lines.append(line ?? "");
            }
        }
    }

    return lines.join("").upper();
}

fun kfrequency(sequence: str, frequency: mut {str: int}, k: int, frame: int) > void {
    for (i: int = frame; i < sequence.len(); i = i + k) {
        final c = sequence.sub(i, len: k);
        frequency[c] = (frequency[c] ?? 0) + 1;
    }
}

fun count(sequence: str, fragment: str) > void {
    final k = fragment.len();
    final frequency: mut {str: int} = mut {};
    for (frame: int = 0; frame < k; frame = frame + 1) {
        kfrequency(sequence, frequency: frequency, k: k, frame: frame);
    }
    std\print("{frequency[fragment] ?? 0}\t{fragment}");
}

fun frequency(sequence: str, k: int) > void {
    final frequency: mut {str: int} = mut {};
    for (frame: int = 0; frame < k; frame = frame + 1) {
        kfrequency(sequence, frequency: frequency, k: k, frame: frame);
    }

    final sum = sequence.len() - k + 1;
    foreach (c, f in frequency) {
        std\print("{c} {(f * 100) / sum}");
    }
    std\print("");
}

// buzz tests/bench/005-k-nucleoide.buzz < tests/bench/reference/knucleotide-input.txt
fun main(_: [str]) > void {
    final sequence = readSequence() catch "";
    frequency(sequence, k: 1);
    frequency(sequence, k: 2);
    count(sequence, fragment: "GGT");
    count(sequence, fragment: "GGTA");
    count(sequence, fragment: "GGTATT");
    count(sequence, fragment: "GGTATTTTAATT");
    count(sequence, fragment: "GGTATTTTAATTTATAGT");
}
