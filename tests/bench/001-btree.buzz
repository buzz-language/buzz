import "std";
import "math";

object Node {
    left: Node? = null,
    right: Node? = null,
}

fun bottomUpTree(depth: int) > Node {
    if (depth > 0) {
        return Node{
            left = bottomUpTree(depth - 1),
            right = bottomUpTree(depth - 1),
        };
    }

    return Node{};
}

fun itemCheck(tree: Node) > int {
    if (tree.left -> left) {
        return 1 + itemCheck(left) + itemCheck(tree.right!);
    } else {
        return 1;
    }

    return 0;
}

fun btree(N: int) > void {
    final mindepth = 4;
    var maxdepth = mindepth + 2;
    if (maxdepth < N) {
        maxdepth = N;
    }

    final stretchdepth = maxdepth + 1;
    final stretchtree = bottomUpTree(stretchdepth);
    std\print("stretch tree of depth {stretchdepth},\t check: {itemCheck(stretchtree)}");

    final longlivedtree = bottomUpTree(maxdepth);
    for (depth: int = mindepth; depth < maxdepth; depth = depth + 2) {
        final iterations = std\toInt(math\pow(x: 2.0, y: std\toDouble(maxdepth - depth + mindepth)) catch 0.0);
        var check = 0;
        foreach (_ in 0..iterations) {
            check = check + itemCheck(bottomUpTree(depth));
        }

        std\print("{iterations}\t trees of depth {depth}\t check: {check}");
    }

    std\print("long lived tree of depth {maxdepth}\t check: {itemCheck(longlivedtree)}");
}

fun main(args: [str]) > void !> any {
    btree(
        std\parseInt(args[?0] ?? "15") ?? 15
    );
}
