import "lib/std";
import "lib/math" as math;

const float pi = 3.141592653589793;
const float solarMass = 4.0 * pi * pi;
const float daysPerYear = 365.24;

object Body {
    float x,
    float y,
    float z,
    float vx,
    float vy,
    float vz,
    float mass,
}

fun advance([Body] bodies, int nbody, float dt) > void {
    for (int i = 0; i < nbody; i = i + 1) {
        Body bi = bodies[i];
        float bix = bi.x;
        float biy = bi.y;
        float biz = bi.z;
        float bimass = bi.mass;
        float bivx = bi.vx;
        float bivy = bi.vy;
        float bivz = bi.vz;

        for (int j = i + 1; j < nbody; j = j + 1) {
            Body bj = bodies[j];
            float dx = bix - bj.x;
            float dy = biy - bj.y;
            float dz = biz - bj.z;
            float dist2 = dx * dx + dy * dy + dz * dz;
            float mag = math.sqrt(dist2);
            mag = dt / (mag * dist2);
            float bm = bj.mass * mag;

            bivx = bivx - (dx * bm);
            bivy = bivy - (dy * bm);
            bivz = bivz - (dz * bm);
            bm = bimass * mag;
            bj.vx = bj.vx + (dx * bm);
            bj.vy = bj.vy + (dy * bm);
            bj.vz = bj.vz + (dz * bm);
        }

        bi.vx = bivx;
        bi.vy = bivy;
        bi.vz = bivz;
        bi.x = bix + dt * bivx;
        bi.y = biy + dt * bivy;
        bi.z = biz + dt * bivz;
    }
}

fun energy([Body] bodies, int nbody) > float {
    float e = 0.0;
    for (int i = 0; i < nbody; i = i + 1) {
        Body bi = bodies[i];
        float vx = bi.vx;
        float vy = bi.vy;
        float vz = bi.vz;
        float bim = bi.mass;
        e = e + (0.5 * bim * (vx * vx + vy * vy + vz * vz));
        for (int j = i + 1; j < nbody; j = j + 1) {
            Body bj = bodies[j];
            float dx = bi.x - bj.x;
            float dy = bi.y - bj.y;
            float dz = bi.z - bj.z;
            float distance = math.sqrt(dx * dx + dy * dy + dz * dz);
            e = e - ((bim * bj.mass) / distance);
        }
    }

    return e;
}

fun offsetMomentum([Body] b, int nbody) > void {
    float px = 0.0;
    float py = 0.0;
    float pz = 0.0;

    for (int i = 0; i < nbody; i = i + 1) {
        Body bi = b[i];
        float bim = bi.mass;

        px = px + (bi.vx * bim);
        py = py + (bi.vy * bim);
        pz = pz + (bi.vz * bim);
    }

    b[0].vx = -px / solarMass;
    b[0].vy = -py / solarMass;
    b[0].vz = -pz / solarMass;
}

fun main([str] args) > void {
    Body sun = Body{
        x = 0.0,
        y = 0.0,
        z = 0.0,
        vx = 0.0,
        vy = 0.0,
        vz = 0.0,
        mass = solarMass,
    };

    Body jupiter = Body{
        x = 4.84143144246472090,
        y = -1.16032004402742839,
        z = -0.103622044471123109,
        vx = 0.00166007664274403694 * daysPerYear,
        vy = 0.00769901118419740425 * daysPerYear,
        vz = -0.0000690460016972063023 * daysPerYear,
        mass = 0.000954791938424326609 * solarMass,
    };

    Body saturn = Body{
        x = 8.34336671824457987,
        y = 4.12479856412430479,
        z = -0.403523417114321381,
        vx = -0.0027674251072686 * daysPerYear,
        vy = 0.0049985280123492 * daysPerYear,
        vz = 0.0000230417297573763929 * daysPerYear,
        mass = 0.00028588598066613 * solarMass,
    };

    Body uranus = Body{
        x = 12.894369562139,
        y = -15.111151401699,
        z = -0.22330757889266,
        vx = 0.0029646013756476 * daysPerYear,
        vy = 0.0023784717395948 * daysPerYear,
        vz = -0.0000296589568540237556 * daysPerYear,
        mass = 0.0000436624404335156298 * solarMass,
    };

    Body neptune = Body{
        x = 15.379697114851,
        y = -25.9193146099879641,
        z = 0.179258772950371181,
        vx = 0.00268067772490389322 * daysPerYear,
        vy = 0.00162824170038242295 * daysPerYear,
        vz = -0.0000951592254519715870 * daysPerYear,
        mass = 0.0000515138902046611451 * solarMass,
    };

    [Body] bodies = [ sun, jupiter, saturn, uranus, neptune ];

    int N = 1000;
    if (args.len() > 0) {
        N = parseInt(args[0]) ?? 1000;
    }
    int nbody = bodies.len();

    offsetMomentum(bodies, nbody: nbody);
    print("{energy(bodies, nbody: nbody)}");

    for (int i = 0; i < N; i = i + 1) {
        advance(bodies, nbody: nbody, dt: 0.01);
    }

    print("{energy(bodies, nbody: nbody)}");
}