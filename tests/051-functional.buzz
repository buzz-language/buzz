import "std";

test "list.forEach" {
    [int] data = [1, 2, 3, 4];

    int sum = 0;
    data.forEach(fun (int _, int element) > void {
        sum = sum + element;
    });

    assert(sum == 10, message: "could use list.forEach");
}

test "list.map" {
    [int] data = [1, 2, 3, 4];

    [str] mapped = data.map(<str>, fun (int _, int element) -> "{element}");

    assert(mapped.join(", ") == "1, 2, 3, 4", message: "could use map");
}

test "list.filter" {
    [int] data = [1, 2, 3, 4];

    [int] odd = data.filter(fun (int _, int element) -> element % 2 != 0);

    assert(odd.join(", ") == "1, 3", message: "could use filter");
}

test "list.reduce" {
    [int] data = [1, 2, 3, 4];

    int sum = data.reduce(
        <int>,
        fun (int _, int element, int accumulator) -> accumulator + element,
        initial: 0
    );

    assert(sum == 10, message: "could use reduce");
}

test "list.sort" {
    [int] data = [10, 3, 12, 0, 1, -3];

    _ = data.sort(fun (int left, int right) -> left < right);

    foreach (int i, int value in [-3, 0, 1, 3, 10, 12]) {
        assert(data[i] == value, message: "list is not ordered");
    }
}

test "map.forEach" {
    {str, int} map = {
        "five": 5,
        "two": 2,
        "one": 1,
        "three": 3,
    };

    int sum = 0;
    map.forEach(
        fun (str _, int value) > void -> sum = sum + value
    );

    assert(sum == 11, message: "could use map.forEach");
}

test "map.sort" {
    {str, int} map = {
        "five": 5,
        "two": 2,
        "one": 1,
        "three": 3,
    };


    _ = map.sort(
        fun (str lhs, str rhs) -> map[lhs]! < map[rhs]!
    );

    [str] ordered = [ "one", "two", "three", "five" ];
    int i = 0;
    foreach (str key in map.keys()) {
        assert(ordered[i] == key, message: "Could sort map");

        i = i + 1;
    }
}