import "std";
import "debug";

object A {}
enum B {
    case,
}

fun dumpType(type myType) > void {
    print("{myType}");
}

protocol C {}

test "Types as value" {
    type myType = <A>;
    type another = <str>;
    type again = <str>;

    assert(another == again, message: "Can compare type values");
}

test "typeof" {
    assert(typeof A{} == <A>, message: "typeof operator");
    assert(typeof B.case == <B>, message: "typeof operator");
    assert(typeof "hello" == <str>, message: "typeof operator");
    assert(typeof true == <bool>, message: "typeof operator");
    assert(typeof null == <void>, message: "typeof operator");
    assert(typeof 1 == <int>, message: "typeof operator");
    assert(typeof 3.14 == <float>, message: "typeof operator");
    assert(typeof $"hello" == <pat>, message: "typeof operator");
    assert(typeof dumpType == <Function(type myType) > void > void>, message: "typeof operator");
}

test "type argument" {
    dumpType(typeof A);
}

zdef("tests/utils/libforeign", `
    const Data = extern struct {
        msg: [*:0]const u8,
        id: i32,
    };
`);

test "necessary weirdness" {
    assert(typeof A == typeof A{}, message: "typeof Object == typeof Object instance");
    assert((<A>) == typeof A, message: "typeof Object == typeof Object instance");

    assert(typeof C == <type>, message: "protocol is a type at runtime");
    assert(typeof Data == <type>, message: "fstruct is a type at runtime");
}

fun generic(<T>, T value) > T {
    return value;
}

fun typeArg(type T, str value) > str {
    dump(T);
    return value;
}

test "generic type expression ambiguity" {
    dump(generic(<str>, "hello"));
    dump(typeArg((<str>), value: "hello"));
}