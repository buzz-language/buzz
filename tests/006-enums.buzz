import "std";

enum(str) StrEnum {
    one,
    two,
    three,
}

enum(int) IntEnum {
    one = 1,
    two = 2,
    three = 3,
    | wat = "wat",
}

enum NaturalEnum {
    zero,
    one,
    two,
}

fun getValue(NaturalEnum case = NaturalEnum.zero) > int {
    return case.value;
}

object Natural {
    NaturalEnum natural = NaturalEnum.zero,
}

test "Enums" {
    assert(StrEnum.one.value == "one", message: "str enum");

    assert(IntEnum.one.value == 1, message: "int enum");

    assert(NaturalEnum.zero.value == 0, message: "natural enum");

    NaturalEnum myCase = NaturalEnum.two;

    assert(myCase.value == 2, message: "enum instance");

    NaturalEnum? fromValue = NaturalEnum(0);
    assert(fromValue != null, message: "Could get enum instance from value");
    assert(fromValue?.value == 0, message: "Could get correct enum instance from value");
}

test "Enum case as default value" {
    assert(getValue() == 0, message: "Could use enum case as function argument default value");

    assert(Natural{}.natural == NaturalEnum.zero, message: "Could use enum case as object field default value");
}