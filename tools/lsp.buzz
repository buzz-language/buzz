import "lib/std";
import "lib/io";
import "lib/json";
import "lib/os" as os;
import "lib/debug" as debug;
import "lib/errors";
import "lib/buffer";

object LspState {
    | TODO: Maybe bad to keep this in memory
    {str, str} sources,
    {str, Json} ast,
}

enum(int) SymbolKind {
    File = 1,
    Module = 2,
    Namespace = 3,
    Package = 4,
    Class = 5,
    Method = 6,
    Property = 7,
    Field = 8,
    Constructor = 9,
    Enum = 10,
    Interface = 11,
    KFunction = 12,
    Variable = 13,
    Constant = 14,
    String = 15,
    Number = 16,
    Boolean = 17,
    Array = 18,
    Object = 19,
    Key = 20,
    Null = 21,
    EnumMember = 22,
    Struct = 23,
    Event = 24,
    Operator = 25,
    TypeParameter = 26,
}

enum LSPErrorType {
    ReadError,
    WriteError,
    ParseError,
}

object LSPError {
    LSPErrorType errorType,
    str message,

    static fun init(LSPErrorType errorType) > LSPError {
        str message = "Error occured";
        if (errorType == LSPErrorType.ReadError) {
            message = "Error while reading request";
        } else if (errorType == LSPErrorType.WriteError) {
            message = "Error while writing response";
        } else if (errorType == LSPErrorType.ParseError) {
            message = "Error while parsing buzz script";
        }

        return LSPError{
            errorType = errorType,
            message = message
        };
    }
} 

fun readContentLength() > int? !> LSPError {
    while (true) {
        try {
            str? header = stdin.readLine();

            if (header == null) {
                throw LSPError{
                    errorType = LSPErrorType.ReadError,
                    message = "Could not parse request header",
                };
            }

            | Consume \r\n
            stdin.read(2);
            | Strip \r
            header = header!.sub(0, len: header!.len() - 1);
            const int? colon = header!.indexOf(": ");
            
            if (colon == null) {
                throw LSPError{
                    errorType = LSPErrorType.ReadError,
                    message = "Could not parse request header",
                };
            }

            const str name = header!.sub(0, len: colon!);
            const str value = header!.sub(colon! + 2);
            
            if (name == "Content-Length") {
                return parseNumber(value);
            }
        } catch {
            throw LSPError{
                    errorType = LSPErrorType.ReadError,
                    message = "Could not parse request header",
                };
        }
    }

    return null;
}

fun respond(str? strId, int? numId, Json result) > void !> LSPError
 {
    try {
        const Json response = Json{
            map = {
                "jsonrpc": Json{ string = "2.0" },
                "id": Json{ string = strId, number = numId },
                "result": result
            }
        };

        const str stringResponse = response.encode();

        stderr.write("Content-Length: {stringResponse.len()}\r\n\r\n{stringResponse}");
        stdout.write("Content-Length: {stringResponse.len()}\r\n\r\n{stringResponse}");
    } catch {
        throw LSPError.init(LSPErrorType.WriteError);
    }
}

fun withinNode(Json node, str uri, int line, int column) > bool {
    const str script = node.q(["location", "script"]).stringValue();
    const int startLine = node.q(["location", "start_line"]).number ?? -1;
    const int startColumn = node.q(["location", "start_column"]).number ?? -1;
    const int endLine = node.q(["location", "end_line"]).number ?? -1;
    const int endColumn = node.q(["location", "end_column"]).number ?? -1;

    const bool result = uri.endsWith(script)
        and line >= startLine and line <= endLine
        and (endLine != startLine or ((column - 1) >= startColumn and (column - 1) <= endColumn));

    stderr.write("is {uri}:{line}:{column} within {node.q(["node"]).stringValue()} {script}:{startLine}:{startColumn} - {endLine}:{endColumn} -> {result}\n") catch void;

    return result;
}

| Go down the ast tree to find the smallest node under `line`:`column`
fun findNodeUnder([Json] trail, Json root, str uri, int line, int column) > void {
    if (!withinNode(root, uri: uri, line: line, column: column)) {
        return;
    }

    trail.append(root);

    const str node = root.q(["node"]).string ?? "-";

    if (node == "Function") {
        const Json body = root.q(["body"]);

        if (withinNode(body, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: body, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Enum") {
        const [Json] cases = root.q(["cases"]).listValue();

        foreach (int i, Json case in cases) {
            if (withinNode(case, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: case, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "VarDeclaration") {
        const Json value = root.q(["value"]);

        if (withinNode(value, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "FunDeclaration") {
        const Json function = root.q(["function"]);

        if (withinNode(function, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: function, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "ObjectDeclaration") {
        const {str, Json} methods = root.q(["methods"]).mapValue();
        const {str, Json} members = root.q(["members"]).mapValue();

        foreach (str name, Json method in methods) {
            if (withinNode(method, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: method, uri: uri, line: line, column: column);

                return;
            }   
        }

        foreach (str name, Json member in members) {
            if (withinNode(member, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: member, uri: uri, line: line, column: column);

                return;
            }   
        }

        return;
    }
    
    if (node == "Binary") {
        const Json left = root.q(["left"]);
        const Json right = root.q(["right"]);

        if (withinNode(left, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: left, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(right, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: right, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Unary") {
        const Json left = root.q(["left"]);
        
        if (withinNode(left, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: left, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Subscript") {
        const Json subscripted = root.q(["subscripted"]);
        const Json index = root.q(["index"]);
        const Json value = root.q(["value"]);

        if (withinNode(subscripted, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: subscripted, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(index, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: index, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(value, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Unwrap") {
        const Json unwrapped = root.q(["unwrapped"]);

        if (withinNode(unwrapped, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: unwrapped, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "ForceUnwrap") {
        const Json unwrapped = root.q(["unwrapped"]);

        if (withinNode(unwrapped, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: unwrapped, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Is") {
        const Json left = root.q(["left"]);
        
        if (withinNode(left, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: left, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Expression") {
        const Json expression = root.q(["expression"]);

        if (withinNode(expression, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: expression, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "NamedVariable") {
        const Json value = root.q(["value"]);

        if (value.map != null and withinNode(value, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Number") {
        return;
    }
    
    if (node == "String") {
        const [Json] elements = root.q(["elements"]).listValue();

        foreach (int i, Json element in elements) {
            if (withinNode(element, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: element, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "StringLiteral") {
        return;
    }
    
    if (node == "Pattern") {
        return;
    }
    
    if (node == "Boolean") {
        return;
    }
    
    if (node == "Null") {
        return;
    }
    
    if (node == "List") {
        const [Json] items = root.q(["items"]).listValue();

        foreach (int i, Json item in items) {
            if (withinNode(item, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: item, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "Map") {
        const {str, Json} map = root.q(["items"]).mapValue();

        foreach (str key, Json value in map) {
            if (withinNode(value, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "Dot") {
        const Json callee = root.q(["callee"]);
        const Json? value = root.mapValue()["value"];
        const Json? call = root.mapValue()["call"];

        if (withinNode(callee, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: callee, uri: uri, line: line, column: column);

            return;
        }

        if (value != null and withinNode(value!, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value!, uri: uri, line: line, column: column);

            return;
        }

        if (call != null and withinNode(call!, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: call!, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "ObjectInit") {
        const Json objectRef = root.q(["object"]);
        const [Json] properties = root.q(["properties"]).listValue();

        if (withinNode(objectRef, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: objectRef, root: objectRef, uri: uri, line: line, column: column);

            return;
        }
        
        foreach (int i, Json property in properties) {
            if (withinNode(property, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: property, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "Throw") {
        const Json errorValue = root.q(["error_value"]);
        
        if (withinNode(errorValue, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: errorValue, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Break") {
        return;
    }
    
    if (node == "Continue") {
        return;
    }
    
    if (node == "Call") {
        const Json? callee = root.mapValue()["callee"];
        const [Json] arguments = root.q(["arguments"]).listValue();

        if (callee != null and withinNode(callee!, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: callee!, uri: uri, line: line, column: column);

            return;
        }

        foreach (int i, Json argument in arguments) {
            const Json argNode = argument.q(["value"]);
            if (withinNode(argNode, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: argNode, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "AsyncCall") {
        const Json call = root.q(["call"]);

        if (withinNode(call, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: call, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Resume") {
        const Json fiber = root.q(["fiber"]);

        if (withinNode(fiber, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: fiber, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Resolve") {
        const Json fiber = root.q(["fiber"]);

        if (withinNode(fiber, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: fiber, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Yield") {
        const Json expression = root.q(["expression"]);

        if (withinNode(expression, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: expression, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "If") {
        const Json condition = root.q(["condition"]);
        const Json body = root.q(["body"]);
        const Json? elseBranch = root.mapValue()["elseBranch"];
        
        if (withinNode(condition, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: condition, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(body, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: body, uri: uri, line: line, column: column);

            return;
        }

        if (elseBranch != null and withinNode(elseBranch!, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: elseBranch!, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "Block") {
        const [Json] statements = root.q(["statements"]).listValue();

        foreach (int i, Json statement in statements) {
            if (withinNode(statement, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: statement, uri: uri, line: line, column: column);

                return;
            }
        }

        return;
    }
    
    if (node == "Return") {
        const Json value = root.q(["value"]);

        if (withinNode(value, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "For") {
        const [Json] initDeclarations = root.q(["init_declarations"]).listValue();
        const Json condition = root.q(["condition"]);
        const [Json] postLoops = root.q(["postLoop"]).listValue();
        const Json body = root.q(["body"]);

        if (withinNode(condition, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: condition, uri: uri, line: line, column: column);

            return;
        }

        foreach (int i, Json initDeclaration in initDeclarations) {
            if (withinNode(initDeclaration, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: initDeclaration, uri: uri, line: line, column: column);

                return;
            }
        }

        foreach (int i, Json postLoop in postLoops) {
            if (withinNode(postLoop, uri: uri, line: line, column: column)) {
                findNodeUnder(trail, root: postLoop, uri: uri, line: line, column: column);

                return;
            }
        }

        if (withinNode(body, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: body, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "ForEach") {
        const Json? key = root.mapValue()["key"];
        const Json value = root.q(["value"]);
        const Json iterable = root.q(["iterable"]);
        const Json block = root.q(["block"]);

        if (key != null and withinNode(key!, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: key!, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(value, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: value, uri: uri, line: line, column: column);

            return;
        }
        
        if (withinNode(iterable, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: iterable, uri: uri, line: line, column: column);

            return;
        }

        if (withinNode(block, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: block, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "DoUntil") {
        const Json condition = root.q(["condition"]);
        const Json block = root.q(["block"]);

        if (withinNode(condition, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: condition, uri: uri, line: line, column: column);

            return;
        }
        
        if (withinNode(block, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: block, uri: uri, line: line, column: column);

            return;
        }

        return;
    }
    
    if (node == "While") {
        const Json condition = root.q(["condition"]);
        const Json block = root.q(["block"]);
        
        if (withinNode(condition, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: condition, uri: uri, line: line, column: column);

            return;
        }
        
        if (withinNode(block, uri: uri, line: line, column: column)) {
            findNodeUnder(trail, root: block, uri: uri, line: line, column: column);

            return;
        }
        
        return;
    }
    
    if (node == "Export") {
        return;
    }
    
    if (node == "Import") {
        return;
    }
}

| Search symbol with a list of statements without going into a deeper scope
fun findSymbolInScope([Json] statements, str symbol) > Json? {
    foreach (int i, Json statement in statements) {
        const str statementType = statement.q(["node"]).stringValue();

        if (statementType == "VarDeclaration") {
            if (symbol == statement.q(["name"]).stringValue()) {
                return statement;
            }
        } else if (statementType == "FunDeclaration") {
            if (symbol == statement.q(["function", "name"]).stringValue()) {
                return statement;
            }
        }
    }

    return null;
}

| Climp up ast tree from the leaf to find its declaration
fun findSymbol([Json] trail, str symbol) > Json? {
    for (int i = trail.len() - 1; i >= 0; i = i - 1) {
        Json node = trail[i];
        const str nodeType = node.q(["node"]).stringValue();

        if (nodeType == "Block") {
            Json? declaration = findSymbolInScope(node.q(["statements"]).listValue(), symbol: symbol);

            if (declaration != null) {
                return declaration;
            }
        } else if (nodeType == "Function") {
            Json? declaration = findSymbolInScope(node.q(["body", "statements"]).listValue(), symbol: symbol);

            if (declaration != null) {
                return declaration;
            }
        }
    }

    return null;
}

| Climp up ast tree from the leaf to find its declaration
fun findDeclaration([Json] trail) > Json? !> LSPError {
    assert(trail.len() >= 2, message: "Trail should not be empty");

    try {
        stderr.write("Searching in trail: ");
        foreach (int i, Json e in trail) {
            stderr.write("{e.q(["node"]).stringValue()} > ");
        }
        stderr.write("\n");

        Json leaf = trail[trail.len() - 1];
        str leafType = leaf.q(["node"]).stringValue();

        if (leafType == "NamedVariable") {
            const str symbol = leaf.q(["identifier"]).stringValue();
            const bool global = leaf.q(["slot_type"]).stringValue().endsWith("Global");

            if (global) {
                | Its a global we can search from the root directly
                return findSymbol([trail[0]], symbol: symbol);
            } else {
                return findSymbol(trail.sub(0, len: trail.len() - 1), symbol: symbol);
            }
        } else if (leafType == "Dot") {
            stderr.write("TODO Dot\n");
        } else {
            stderr.write("Can't investigate a {leafType}\n");
        }
    } catch {
        throw LSPError.init(LSPErrorType.WriteError);
    }

    return null;
}

fun getAst(LspState state, str filename) > Json !> LSPError {
    if (!filename.startsWith("file://")) {
        throw LSPError.init(LSPErrorType.ParseError);
    }

    | Dismiss "file://" prefix
    filename = filename.sub(7);

    str? source = state.sources[filename];
    if (source == null) {
        try {
            File file = File.open(filename, mode: FileMode.read);

            source = file.readAll();
            state.sources[filename] = source!;

            file.close();
        } catch {
            throw LSPError.init(LSPErrorType.ParseError);
        }
    }

    if (state.ast[filename] == null) {
        try {
            stderr.write("Getting ast for {filename}\n");

            str astString = debug.ast(source!, scriptName: filename);

            state.ast[filename] = Json.decode(astString);
        } catch {
            throw LSPError.init(LSPErrorType.ParseError);
        }
    }

    return state.ast[filename]!;
}

fun getSymbolsAt(Json node, [Json] declarations) > void {
    const str ndType = node.q(["node"]).stringValue();

    if (ndType == "Function") {
        getSymbolsAt(node.q(["body"]), declarations: declarations);

        return;
    }
    
    if (ndType == "Enum") {
        declarations.append(Json{
            map = {
                "name": Json{ string = node.q(["type_def"]).stringValue().sub(5) },
                "kind": Json{ number = SymbolKind.Enum.value },
                "range": locationToRange(node.q(["location"])),
                "selectionRange": locationToRange(node.q(["location"])),
            }
        });

        return;
    }
    
    if (ndType == "VarDeclaration") {
        declarations.append(Json{
            map = {
                "name": Json{ string = node.q(["name"]).stringValue() },
                "kind": Json{ number = SymbolKind.Variable.value },
                "range": locationToRange(node.q(["location"])),
                "selectionRange": locationToRange(node.q(["location"])),
            }
        });

        return;
    }
    
    if (ndType == "FunDeclaration") {
        pat namePattern = _fun (.+)\(_;
        str name = namePattern.match(node.q(["type_def"]).stringValue())![1];

        declarations.append(Json{
            map = {
                "name": Json{ string = name },
                "kind": Json{ number = SymbolKind.KFunction.value },
                "range": locationToRange(node.q(["location"])),
                "selectionRange": locationToRange(node.q(["location"])),
            }
        });

        return;
    }
    
    if (ndType == "ObjectDeclaration") {
        pat namePattern = _(object) (.+)_;
        [str] match = namePattern.match(node.q(["type_def"]).stringValue())!;
        SymbolKind kind = SymbolKind.Object;
        str name = match[2];

        declarations.append(Json{
            map = {
                "name": Json{ string = name },
                "kind": Json{ number = kind.value },
                "range": locationToRange(node.q(["location"])),
                "selectionRange": locationToRange(node.q(["location"])),
            }
        });

        foreach (str methodName, Json method in node.q(["methods"]).mapValue()) {
            declarations.append(Json{
                map = {
                    "name": Json{ string = methodName },
                    "kind": Json{ number = SymbolKind.Method.value },
                    "range": locationToRange(method.q(["location"])),
                    "selectionRange": locationToRange(method.q(["location"])),
                }
            });
        }

        foreach (str propertyName, Json def in node.q(["members"]).mapValue()) {
            declarations.append(Json{
                map = {
                    "name": Json{ string = propertyName },
                    "kind": Json{ number = SymbolKind.Property.value },
                    | TODO: add property location
                    "range": locationToRange(node.q(["location"])),
                    "selectionRange": locationToRange(node.q(["location"])),
                }
            });
        }

        return;
    }
    
    if (ndType == "Expression") {
        getSymbolsAt(node.q(["expression"]), declarations: declarations);

        return;
    }
    
    if (ndType == "If") {
        getSymbolsAt(node.q(["condition"]), declarations: declarations);
        getSymbolsAt(node.q(["body"]), declarations: declarations);
        getSymbolsAt(node.q(["else"]), declarations: declarations);

        return;
    }
    
    if (ndType == "Block") {
        foreach (int i, Json statement in node.q(["statements"]).listValue()) {
            getSymbolsAt(statement, declarations: declarations);
        }
    }
    
    if (ndType == "For") {
        getSymbolsAt(node.q(["body"]), declarations: declarations);

        return;
    }
    
    if (ndType == "ForEach") {
        getSymbolsAt(node.q(["block"]), declarations: declarations);

        return;
    }
    
    if (ndType == "DoUntil") {
        getSymbolsAt(node.q(["block"]), declarations: declarations);

        return;
    }
    
    if (ndType == "While") {
        getSymbolsAt(node.q(["block"]), declarations: declarations);

        return;
    }
}

fun getSymbols(LspState state, {str, Json} request) > Json {
    const Json ast = getAst(state, filename: request["params"]?.q(["textDocument", "uri"]).stringValue() ?? "") catch Json{};

    [Json] declarations = [<Json>];
    
    getSymbolsAt(ast, declarations: declarations);

    return Json{ list = declarations };
}

fun locationToRange(Json location) > Json {
    const int startLine = location.q(["start_line"]).number ?? -1;
    const int startColumn = location.q(["start_column"]).number ?? -1;
    const int endLine = location.q(["end_line"]).number ?? -1;
    const int endColumn = location.q(["end_column"]).number ?? -1;

    return Json{
        map = {
            "start": Json{
                map = {
                    "line": Json{ number = startLine },
                    "character": Json{ number = startColumn },
                }
            },
            "end": Json{
                map = {
                    "line": Json{ number = endLine },
                    "character": Json{ number = endColumn },
                }
            }
        }
    };
}

fun gotoDefinition(LspState state, {str, Json} request) > Json !> LSPError {
    const {str, Json} textDocument = request["params"]?.q(["textDocument"]).mapValue() ?? {<str, Json>};
    str uri = textDocument["uri"]?.stringValue() ?? "";
    const {str, Json} position = request["params"]?.q(["position"]).mapValue() ?? {<str, Json>};
    const int line = position["line"]?.numberValue() ?? 0;
    const int column = position["character"]?.numberValue() ?? 0;

    Json ast = getAst(state, filename: uri);

    | Skip entry point
    [Json] roots = ast.q(["body", "statements"]).list ?? [<Json>];
    foreach (int i, Json root in roots) {
        [Json] trail = [ast];
        
        findNodeUnder(trail, root: root, uri: uri, line: line, column: column);
        
        if (trail.len() > 1) {
            Json? declaration = findDeclaration(trail);

            if (declaration != null) {
                return Json{
                    map = {
                        "uri": Json{ string = uri },
                        "range": locationToRange(declaration!.q(["location"])),
                    }
                };
            }

            break;
        }
    }

    return Json{};
}

fun stop(LspState state, {str, Json} request) > Json {
    os.exit(0);

    return Json{};
}

const {str, Function(LspState state, {str, Json} request) > Json} handlers = {
    "exit": stop,
    "shutdown": stop,
    "initialize": fun (LspState state, {str, Json} request) > Json
        -> Json{
            map = {
                "capabilities": Json{
                    map = {
                        "declarationProvider": Json{ boolean = true },
                        "definitionProvider": Json{ boolean = true },
                        "documentSymbolProvider": Json{ boolean = true },
                    }
                },
                "serverInfo": Json{
                    map = {
                        "name": Json{ string = "buzz-lsp" },
                        "version": Json{ string= "0.0.1" },
                    },
                },
            },
        },
    | There's not really a difference between declaration and definition in buzz
    "textDocument/declaration": gotoDefinition,
    "textDocument/definition": gotoDefinition,
    "textDocument/documentSymbol": getSymbols,
};

fun main([str] args) > void !> LSPError, JsonParseError, str {
    LspState state = LspState{
        sources = {<str, str>},
        ast = {<str, Json>},
    };

    while (true) {
        int? contentLength = readContentLength();

        if (contentLength == null or contentLength! <= 0) {
            throw "Request is empty";
        }

        str? requestRaw = stdin.read(contentLength ?? 0) catch null;

        stderr.write("Request is: `{requestRaw!}`\n") catch void;

        if (requestRaw == null) {
            throw "Could not read request";
        }

        {str, Json} request = (Json.decode(requestRaw!) catch Json{}).mapValue();
        const str? method = request["method"]?.string;

        stderr.write("Method is: `{method ?? "none"}`\n") catch void;

        Json result = Json{};
        if (method != null and handlers[method!] != null) {
            result = handlers[method!]!(state, request: request);
        }

        respond(
            strId: request["id"]?.string,
            numId: request["id"]?.number,
            result: result,
        );
    }
}

test "documentSymbol" {
    LspState state = LspState{
        sources = {<str, str>},
        ast = {<str, Json>},
    };

    {str, Json} request = Json.decode(
        "\{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"textDocument/documentSymbol\",\"params\":\{\"textDocument\":\{\"uri\":\"file:///Users/giann/git/buzz/lib/json.buzz\"}}}"
    ).mapValue();

    print(handlers["textDocument/documentSymbol"]!(state, request: request).encode());
}